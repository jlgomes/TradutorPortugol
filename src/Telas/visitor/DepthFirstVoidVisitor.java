/* Generated by JTB 1.4.7 */
package Telas.visitor;

import Telas.syntaxtree.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
      return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeTCF n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Start n) {
    // f0 -> Programa()
    n.f0.accept(this);
  }

  public void visit(final Programa n) {
    // f0 -> ( #0 <VAR>
    // .. .. . #1 ( %0 GDecl()
    // .. .. . .. | %1 FunDeclaracao() )+ )?
    n.f0.accept(this);
    // f1 -> <INICIO_LITERAL>
    n.f1.accept(this);
    // f2 -> Declaracao()
    n.f2.accept(this);
    // f3 -> <FIMALGORITMO>
    n.f3.accept(this);
    // f4 -> <EOF>
    n.f4.accept(this);
  }

  public void visit(final Declaracao n) {
    // f0 -> GlobalDeclaracao()
    n.f0.accept(this);
    // f1 -> ( CorpoDeclLista() )*
    n.f1.accept(this);
  }

  public void visit(final GlobalDeclaracao n) {
    // f0 -> ( GDecl() )*
    n.f0.accept(this);
    // f1 -> ( CorpoDeclLista() )*
    n.f1.accept(this);
  }

  public void visit(final GDecl n) {
    // f0 -> . %0 #0 <Tipo> #1 <IDENTIFIER> #2 <IGUAL> #3 DefTipo()
    // .. .. | %1 VarDeclaracao()
    n.f0.accept(this);
  }

  public void visit(final DefTipo n) {
    // f0 -> . %0 #0 <Registro>
    // .. .. . .. #1 ( VarDeclaracao() )+
    // .. .. . .. #2 <FimRegistro> #3 <PONTOEVIRGULA>
    // .. .. | %1 #0 <VETOR> #1 <ACOLCHETE> #2 <DIGITO> #3 <PONTOS> #4 <DIGITO> #5 <FCOLCHETE> #6 <DE>
    // .. .. . .. #7 ( &0 <TIPO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #8 <PONTOEVIRGULA>
    // .. .. | %2 #0 <MATRIZ> #1 <ACOLCHETE> #2 <DIGITO> #3 <PONTOS> #4 <DIGITO>
    // .. .. . .. #5 ( $0 <VIRGULA> $1 <DIGITO> $2 <PONTOS> $3 <DIGITO> )+
    // .. .. . .. #6 <FCOLCHETE> #7 <DE>
    // .. .. . .. #8 ( &0 <TIPO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #9 <PONTOEVIRGULA>
    n.f0.accept(this);
  }

  public void visit(final TipoEspecificador n) {
    // f0 -> . %0 <TIPO>
    // .. .. | %1 <IDENTIFIER>
    n.f0.accept(this);
  }

  public void visit(final VarDeclaracao n) {
    // f0 -> TipoEspecificador()
    n.f0.accept(this);
    // f1 -> <DOISPONTOS>
    n.f1.accept(this);
    // f2 -> VarDeclaracaoI()
    n.f2.accept(this);
  }

  public void visit(final VarDeclaracaoI n) {
    // f0 -> VarListaNum()
    n.f0.accept(this);
    // f1 -> <PONTOEVIRGULA>
    n.f1.accept(this);
  }

  public void visit(final VarListaNum n) {
    // f0 -> VarItemNum()
    n.f0.accept(this);
    // f1 -> ( VNum() )*
    n.f1.accept(this);
  }

  public void visit(final VNum n) {
    // f0 -> <VIRGULA>
    n.f0.accept(this);
    // f1 -> VarItemNum()
    n.f1.accept(this);
  }

  public void visit(final VarItemNum n) {
    // f0 -> <IDENTIFIER>
    n.f0.accept(this);
    // f1 -> VarItemVetor()
    n.f1.accept(this);
  }

  public void visit(final VarItemVetor n) {
    // f0 -> ( #0 <RECEBE> #1 VarComplemento() )?
    n.f0.accept(this);
  }

  public void visit(final VarComplemento n) {
    // f0 -> . %0 #0 ( <MENOS> )?
    // .. .. . .. #1 <DIGITO>
    // .. .. | %1 #0 ( <MENOS> )?
    // .. .. . .. #1 <IDENTIFIER>
    // .. .. | %2 #0 ( <MENOS> )?
    // .. .. . .. #1 <PONTO_FLUTUANTE>
    // .. .. | %3 <STRING>
    // .. .. | %4 <FALSO>
    // .. .. | %5 <VERDADEIRO>
    n.f0.accept(this);
  }

  public void visit(final FunDeclaracao n) {
    // f0 -> <MODULO>
    n.f0.accept(this);
    // f1 -> <IDENTIFIER>
    n.f1.accept(this);
    // f2 -> <APARENTESE>
    n.f2.accept(this);
    // f3 -> ( Params() )?
    n.f3.accept(this);
    // f4 -> <FPARENTESE>
    n.f4.accept(this);
    // f5 -> CompostoDecl()
    n.f5.accept(this);
    // f6 -> <FIMMODULO>
    n.f6.accept(this);
    // f7 -> <PONTOEVIRGULA>
    n.f7.accept(this);
  }

  public void visit(final Params n) {
    // f0 -> ParamLista()
    n.f0.accept(this);
  }

  public void visit(final ParamLista n) {
    // f0 -> Param()
    n.f0.accept(this);
    // f1 -> ( PParam() )*
    n.f1.accept(this);
  }

  public void visit(final PParam n) {
    // f0 -> <VIRGULA>
    n.f0.accept(this);
    // f1 -> Param()
    n.f1.accept(this);
  }

  public void visit(final Param n) {
    // f0 -> TipoEspecificador()
    n.f0.accept(this);
    // f1 -> <DOISPONTOS>
    n.f1.accept(this);
    // f2 -> <IDENTIFIER>
    n.f2.accept(this);
    // f3 -> ( ParamI() )?
    n.f3.accept(this);
  }

  public void visit(final ParamI n) {
    // f0 -> <ACOLCHETE>
    n.f0.accept(this);
    // f1 -> ( %0 <DIGITO>
    // .. .. | %1 <IDENTIFIER> )?
    n.f1.accept(this);
    // f2 -> ( ParamIVetor() )*
    n.f2.accept(this);
    // f3 -> <FCOLCHETE>
    n.f3.accept(this);
  }

  public void visit(final ParamIVetor n) {
    // f0 -> <VIRGULA>
    n.f0.accept(this);
    // f1 -> ( %0 <DIGITO>
    // .. .. | %1 <IDENTIFIER> )
    n.f1.accept(this);
  }

  public void visit(final CompostoDecl n) {
    // f0 -> ( LocalDeclaracoes() )*
    n.f0.accept(this);
    // f1 -> CorpoDeclLista()
    n.f1.accept(this);
  }

  public void visit(final LocalDeclaracoes n) {
    // f0 -> VarDeclaracao()
    n.f0.accept(this);
  }

  public void visit(final CorpoDeclLista n) {
    // f0 -> Corpo()
    n.f0.accept(this);
    // f1 -> ( CLista() )*
    n.f1.accept(this);
  }

  public void visit(final CLista n) {
    // f0 -> Corpo()
    n.f0.accept(this);
  }

  public void visit(final Corpo n) {
    // f0 -> . %0 ExpressaoDecl()
    // .. .. | %1 SelecaoDecl()
    // .. .. | %2 EscolhaDecl()
    // .. .. | %3 IteracaoDecl()
    // .. .. | %4 RetornoDecl()
    // .. .. | %5 EntradaSaidaDecl()
    // .. .. | %6 GDecl()
    n.f0.accept(this);
  }

  public void visit(final ExpressaoDecl n) {
    // f0 -> . %0 #0 Expressao() #1 <PONTOEVIRGULA>
    // .. .. | %1 <PONTOEVIRGULA>
    n.f0.accept(this);
  }

  public void visit(final SelecaoDecl n) {
    // f0 -> <SE>
    n.f0.accept(this);
    // f1 -> <APARENTESE>
    n.f1.accept(this);
    // f2 -> CondicaoDecl()
    n.f2.accept(this);
    // f3 -> <FPARENTESE>
    n.f3.accept(this);
    // f4 -> <ENTAO>
    n.f4.accept(this);
    // f5 -> SelecaoDeclI()
    n.f5.accept(this);
  }

  public void visit(final SelecaoDeclI n) {
    // f0 -> . %0 #0 <INICIO_LITERAL>
    // .. .. . .. #1 ( Corpo() )+
    // .. .. . .. #2 <FIM_LITERAL> #3 <PONTOEVIRGULA> #4 SelecaoDeclII()
    // .. .. | %1 #0 ( Corpo() )+
    // .. .. . .. #1 SelecaoDeclII()
    n.f0.accept(this);
  }

  public void visit(final SelecaoDeclII n) {
    // f0 -> . %0 #0 <FIMSE> #1 <PONTOEVIRGULA>
    // .. .. | %1 #0 <SENAO> #1 SelecaoDeclIII()
    n.f0.accept(this);
  }

  public void visit(final SelecaoDeclIII n) {
    // f0 -> . %0 #0 <INICIO_LITERAL>
    // .. .. . .. #1 ( Corpo() )+
    // .. .. . .. #2 <FIM_LITERAL> #3 <PONTOEVIRGULA> #4 <FIMSE> #5 <PONTOEVIRGULA>
    // .. .. | %1 #0 ( Corpo() )+
    // .. .. . .. #1 <FIMSE> #2 <PONTOEVIRGULA>
    n.f0.accept(this);
  }

  public void visit(final IteracaoDecl n) {
    // f0 -> . %0 #0 <ENQUANTO> #1 <APARENTESE> #2 CondicaoDecl() #3 <FPARENTESE> #4 <FACA>
    // .. .. . .. #5 ( Corpo() )+
    // .. .. . .. #6 <FIMENQUANTO> #7 <PONTOEVIRGULA>
    // .. .. | %1 #0 <REPITA>
    // .. .. . .. #1 ( Corpo() )+
    // .. .. . .. #2 <ATE> #3 <APARENTESE> #4 CondicaoDecl() #5 <FPARENTESE> #6 <PONTOEVIRGULA>
    // .. .. | %2 #0 <PARA> #1 <IDENTIFIER> #2 <DE> #3 <DIGITO> #4 <ATE> #5 <DIGITO> #6 IteracaoDeclI()
    n.f0.accept(this);
  }

  public void visit(final IteracaoDeclI n) {
    // f0 -> . %0 #0 <FACA>
    // .. .. . .. #1 ( Corpo() )+
    // .. .. . .. #2 <FIMPARA> #3 <PONTOEVIRGULA>
    // .. .. | %1 #0 <PASSO>
    // .. .. . .. #1 ( <MENOS> )?
    // .. .. . .. #2 <DIGITO> #3 <FACA>
    // .. .. . .. #4 ( Corpo() )+
    // .. .. . .. #5 <FIMPARA> #6 <PONTOEVIRGULA>
    n.f0.accept(this);
  }

  public void visit(final RetornoDecl n) {
    // f0 -> <RETORNE>
    n.f0.accept(this);
    // f1 -> RetornoDeclI()
    n.f1.accept(this);
  }

  public void visit(final RetornoDeclI n) {
    // f0 -> . %0 <PONTOEVIRGULA>
    // .. .. | %1 #0 Expressao() #1 <PONTOEVIRGULA>
    // .. .. | %2 <FALSO>
    // .. .. | %3 <VERDADEIRO>
    // .. .. | %4 <STRING>
    n.f0.accept(this);
  }

  public void visit(final EntradaSaidaDecl n) {
    // f0 -> . %0 #0 <LEIA> #1 <APARENTESE> #2 Lendo() #3 <FPARENTESE> #4 <PONTOEVIRGULA>
    // .. .. | %1 #0 <ESCREVA> #1 <APARENTESE> #2 Escrevendo() #3 <FPARENTESE> #4 <PONTOEVIRGULA>
    n.f0.accept(this);
  }

  public void visit(final Lendo n) {
    // f0 -> VarLerNum()
    n.f0.accept(this);
  }

  public void visit(final VarLerNum n) {
    // f0 -> VarItemLerNum()
    n.f0.accept(this);
    // f1 -> ( VLerNum() )*
    n.f1.accept(this);
  }

  public void visit(final VLerNum n) {
    // f0 -> <VIRGULA>
    n.f0.accept(this);
    // f1 -> VarLerNum()
    n.f1.accept(this);
  }

  public void visit(final VarItemLerNum n) {
    // f0 -> <IDENTIFIER>
    n.f0.accept(this);
    // f1 -> VarLerVetor()
    n.f1.accept(this);
  }

  public void visit(final VarLerVetor n) {
    // f0 -> ( %0 #0 <ACOLCHETE>
    // .. .. . .. #1 ( &0 <DIGITO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #2 ( ParamIVetor() )*
    // .. .. . .. #3 <FCOLCHETE>
    // .. .. . .. #4 ( $0 <PONTO> $1 <IDENTIFIER>
    // .. .. . .. .. . $2 ( ?0 <ACOLCHETE>
    // .. .. . .. .. . .. . ?1 ( &0 <DIGITO>
    // .. .. . .. .. . .. . .. | &1 <IDENTIFIER> )
    // .. .. . .. .. . .. . ?2 ( ParamIVetor() )*
    // .. .. . .. .. . .. . ?3 <FCOLCHETE> )? )?
    // .. .. | %1 #0 <PONTO> #1 <IDENTIFIER>
    // .. .. . .. #2 ( $0 <ACOLCHETE>
    // .. .. . .. .. . $1 ( &0 <DIGITO>
    // .. .. . .. .. . .. | &1 <IDENTIFIER> )
    // .. .. . .. .. . $2 ( ParamIVetor() )*
    // .. .. . .. .. . $3 <FCOLCHETE> )? )?
    n.f0.accept(this);
  }

  public void visit(final Escrevendo n) {
    // f0 -> EscreveItem()
    n.f0.accept(this);
    // f1 -> ( EscrevendoRec() )*
    n.f1.accept(this);
  }

  public void visit(final EscrevendoRec n) {
    // f0 -> <VIRGULA>
    n.f0.accept(this);
    // f1 -> EscreveItem()
    n.f1.accept(this);
  }

  public void visit(final EscreveItem n) {
    // f0 -> . %0 #0 <IDENTIFIER> #1 VarLerVetor()
    // .. .. | %1 <STRING>
    // .. .. | %2 <FALSO>
    // .. .. | %3 <VERDADEIRO>
    // .. .. | %4 <DIGITO>
    // .. .. | %5 <PONTO_FLUTUANTE>
    n.f0.accept(this);
  }

  public void visit(final EscolhaDecl n) {
    // f0 -> <Escolha>
    n.f0.accept(this);
    // f1 -> <IDENTIFIER>
    n.f1.accept(this);
    // f2 -> EscolhaCaso()
    n.f2.accept(this);
    // f3 -> ( EscolhaExcessao() )?
    n.f3.accept(this);
    // f4 -> <FimEscolha>
    n.f4.accept(this);
    // f5 -> <PONTOEVIRGULA>
    n.f5.accept(this);
  }

  public void visit(final EscolhaCaso n) {
    // f0 -> EscCaso()
    n.f0.accept(this);
    // f1 -> ( EscolhaRec() )*
    n.f1.accept(this);
  }

  public void visit(final EscolhaRec n) {
    // f0 -> EscCaso()
    n.f0.accept(this);
  }

  public void visit(final EscCaso n) {
    // f0 -> <Caso>
    n.f0.accept(this);
    // f1 -> <DIGITO>
    n.f1.accept(this);
    // f2 -> <DOISPONTOS>
    n.f2.accept(this);
    // f3 -> ( Corpo() )+
    n.f3.accept(this);
  }

  public void visit(final EscolhaExcessao n) {
    // f0 -> <Caso>
    n.f0.accept(this);
    // f1 -> <Contrario>
    n.f1.accept(this);
    // f2 -> <DOISPONTOS>
    n.f2.accept(this);
    // f3 -> ( Corpo() )+
    n.f3.accept(this);
  }

  public void visit(final Expressao n) {
    // f0 -> SimplesEpressao()
    n.f0.accept(this);
  }

  public void visit(final CondicaoDecl n) {
    // f0 -> ExpressaoRelacional()
    n.f0.accept(this);
    // f1 -> Relacional()
    n.f1.accept(this);
    // f2 -> ExpressaoRelacional()
    n.f2.accept(this);
    // f3 -> ( #0 Logico() #1 ExpressaoRelacional() #2 Relacional() #3 ExpressaoRelacional() )*
    n.f3.accept(this);
  }

  public void visit(final Valor n) {
    // f0 -> . %0 #0 ( <MENOS> )?
    // .. .. . .. #1 <DIGITO>
    // .. .. | %1 #0 ( <MENOS> )?
    // .. .. . .. #1 <IDENTIFIER>
    // .. .. . .. #2 [ Var() ]
    // .. .. | %2 #0 ( <MENOS> )?
    // .. .. . .. #1 <PONTO_FLUTUANTE>
    // .. .. | %3 <STRING>
    // .. .. | %4 <VERDADEIRO>
    // .. .. | %5 <FALSO>
    n.f0.accept(this);
  }

  public void visit(final ExpressaoRelacional n) {
    // f0 -> . %0 Valor()
    // .. .. | %1 #0 <APARENTESE> #1 Valor() #2 <FPARENTESE>
    n.f0.accept(this);
  }

  public void visit(final SimplesEpressao n) {
    // f0 -> SomaExpressao()
    n.f0.accept(this);
  }

  public void visit(final Relacional n) {
    // f0 -> . %0 <MENORIGUAL>
    // .. .. | %1 <MENOR>
    // .. .. | %2 <MAIOR>
    // .. .. | %3 <MAIORIGUAL>
    // .. .. | %4 <IGUAL>
    // .. .. | %5 <DIFERENTE>
    n.f0.accept(this);
  }

  public void visit(final Logico n) {
    // f0 -> . %0 <E>
    // .. .. | %1 <OU>
    // .. .. | %2 <NAO>
    n.f0.accept(this);
  }

  public void visit(final SomaExpressao n) {
    // f0 -> Termo()
    n.f0.accept(this);
    // f1 -> ( SomaExpressaoI() )*
    n.f1.accept(this);
  }

  public void visit(final SomaExpressaoI n) {
    // f0 -> Soma()
    n.f0.accept(this);
    // f1 -> Termo()
    n.f1.accept(this);
  }

  public void visit(final Soma n) {
    // f0 -> . %0 <MAIS>
    // .. .. | %1 <MENOS>
    n.f0.accept(this);
  }

  public void visit(final Termo n) {
    // f0 -> Fator()
    n.f0.accept(this);
    // f1 -> ( TermoI() )*
    n.f1.accept(this);
  }

  public void visit(final TermoI n) {
    // f0 -> Mult()
    n.f0.accept(this);
    // f1 -> Fator()
    n.f1.accept(this);
  }

  public void visit(final Mult n) {
    // f0 -> . %0 <MULTIPLICAR>
    // .. .. | %1 <DIVIDIR>
    n.f0.accept(this);
  }

  public void visit(final Fator n) {
    // f0 -> . %0 #0 <APARENTESE> #1 SimplesEpressao() #2 <FPARENTESE>
    // .. .. | %1 #0 <IDENTIFIER> #1 VarAtivacao()
    // .. .. | %2 <DIGITO>
    // .. .. | %3 <PONTO_FLUTUANTE>
    // .. .. | %4 #0 <DIV> #1 <APARENTESE>
    // .. .. . .. #2 ( &0 <DIGITO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #3 <VIRGULA>
    // .. .. . .. #4 ( &0 <DIGITO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #5 <FPARENTESE>
    // .. .. | %5 #0 <MOD> #1 <APARENTESE>
    // .. .. . .. #2 ( &0 <DIGITO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #3 <VIRGULA>
    // .. .. . .. #4 ( &0 <DIGITO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #5 <FPARENTESE>
    n.f0.accept(this);
  }

  public void visit(final VarAtivacao n) {
    // f0 -> . %0 Ativacao()
    // .. .. | %1 #0 ( Var() )?
    // .. .. . .. #1 ( $0 <RECEBE>
    // .. .. . .. .. . $1 ( &0 SimplesEpressao()
    // .. .. . .. .. . .. | &1 ?0 ( <MENOS> )?
    // .. .. . .. .. . .. . .. ?1 <IDENTIFIER>
    // .. .. . .. .. . .. . .. ?2 ( Var() )?
    // .. .. . .. .. . .. | &2 ?0 ( <MENOS> )?
    // .. .. . .. .. . .. . .. ?1 <DIGITO>
    // .. .. . .. .. . .. | &3 ?0 ( <MENOS> )?
    // .. .. . .. .. . .. . .. ?1 <PONTO_FLUTUANTE>
    // .. .. . .. .. . .. | &4 <FALSO>
    // .. .. . .. .. . .. | &5 <VERDADEIRO>
    // .. .. . .. .. . .. | &6 <STRING> ) )?
    n.f0.accept(this);
  }

  public void visit(final Var n) {
    // f0 -> . %0 #0 <ACOLCHETE>
    // .. .. . .. #1 ( &0 <DIGITO>
    // .. .. . .. .. | &1 <IDENTIFIER> )
    // .. .. . .. #2 ( ParamIVetor() )*
    // .. .. . .. #3 <FCOLCHETE>
    // .. .. . .. #4 ( $0 <PONTO> $1 <IDENTIFIER>
    // .. .. . .. .. . $2 ( ?0 <ACOLCHETE>
    // .. .. . .. .. . .. . ?1 ( &0 <DIGITO>
    // .. .. . .. .. . .. . .. | &1 <IDENTIFIER> )
    // .. .. . .. .. . .. . ?2 ( ParamIVetor() )*
    // .. .. . .. .. . .. . ?3 <FCOLCHETE> )? )?
    // .. .. | %1 #0 <PONTO> #1 <IDENTIFIER>
    // .. .. . .. #2 ( $0 <ACOLCHETE>
    // .. .. . .. .. . $1 ( &0 <DIGITO>
    // .. .. . .. .. . .. | &1 <IDENTIFIER> )
    // .. .. . .. .. . $2 ( ParamIVetor() )*
    // .. .. . .. .. . $3 <FCOLCHETE> )?
    n.f0.accept(this);
  }

  public void visit(final Ativacao n) {
    // f0 -> <APARENTESE>
    n.f0.accept(this);
    // f1 -> ( Args() )?
    n.f1.accept(this);
    // f2 -> <FPARENTESE>
    n.f2.accept(this);
  }

  public void visit(final Args n) {
    // f0 -> ArgLista()
    n.f0.accept(this);
  }

  public void visit(final ArgLista n) {
    // f0 -> ( %0 <FALSO>
    // .. .. | %1 <VERDADEIRO>
    // .. .. | %2 #0 ( <MENOS> )?
    // .. .. . .. #1 <DIGITO>
    // .. .. | %3 #0 ( <MENOS> )?
    // .. .. . .. #1 <IDENTIFIER>
    // .. .. . .. #2 ( Var() )?
    // .. .. | %4 #0 ( <MENOS> )?
    // .. .. . .. #1 <PONTO_FLUTUANTE>
    // .. .. | %5 <STRING> )
    n.f0.accept(this);
    // f1 -> ( ArgListaRec() )*
    n.f1.accept(this);
  }

  public void visit(final ArgListaRec n) {
    // f0 -> <VIRGULA>
    n.f0.accept(this);
    // f1 -> ( %0 <FALSO>
    // .. .. | %1 <VERDADEIRO>
    // .. .. | %2 #0 ( <MENOS> )?
    // .. .. . .. #1 <DIGITO>
    // .. .. | %3 #0 ( <MENOS> )?
    // .. .. . .. #1 <IDENTIFIER>
    // .. .. . .. #2 ( Var() )?
    // .. .. | %4 #0 ( <MENOS> )?
    // .. .. . .. #1 <PONTO_FLUTUANTE>
    // .. .. | %5 <STRING> )
    n.f1.accept(this);
  }

}
