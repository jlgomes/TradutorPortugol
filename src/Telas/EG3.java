/* Generated By:JavaCC: Do not edit this line. EG3.java */
package Telas;

import Telas.TabelaSintatico.hash;
import Telas.AnaliseSemantica.registro;
import Telas.TabelaSintatico.Variavel;
import Telas.visitor.*;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import Telas.syntaxtree.*;


public class EG3 implements EG3Constants {

  String erro = "";

  int simerro = 0;

  Token t = null;

  Token tr = null;

  Token tf = null;

  Token tipo = null;

  Token funcao = null;

  Token reg = null;

  Token reg2 = null;

  int escopo = 0;

  int fim;

  int vetor = 0;

  int pos, num = 1;

  int atrib = 0;

  int retorno = 0;

  String tipoFuncao = null;

  TabelaSintatico tbs = new TabelaSintatico();

  ArrayList<Variavel> var = new ArrayList<Variavel>();

  ArrayList<Variavel> varLoc = new ArrayList<Variavel>();

  ArrayList<Variavel> par = new ArrayList<Variavel>();

  ArrayList<registro> argumentos = new ArrayList<registro>();

  ArrayList<registro> atribuicao = new ArrayList<registro>();

  ArrayList<registro> relacional = new ArrayList<registro>();

  String atribuicaoComposta = null;

  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    EG3 eg = new EG3(System.in);
    try {
      Start start = eg.Start();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
    }
    catch (Exception e) {
      eg.erro = e.getMessage();
      eg.simerro = 1;
    }
    catch (TokenMgrError E) {
      eg.erro = E.getMessage();
      eg.simerro = 1;
    }
  }

  public EG3(String codigo) throws IOException {
    FileInputStream fs = new java.io.FileInputStream(codigo);
    EG3 eg1 = new EG3(fs);
    try {
      TraducaoPortugolEmC.programaAll.clear();
      tbs.excluirtabelahash();
      Start start = eg1.Start();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      TraducaoPortugolEmC.execute();
    }
    catch (Exception e) {
      erro = e.getMessage();
      simerro = 1;
    }
    catch (TokenMgrError E) {
      erro = E.getMessage();
      simerro = 1;
    }
    finally {
      fs.close();
    }
  }

  public boolean registroExiste() {
    hash aux = null;
    for (int i = 0; i < 10; i++) {
      aux = tbs.tabela[i];
      while (aux != null) {
        if (aux.registro != null && aux.registro.token.toString().equals(tipo.toString()))
          return true;
        aux = aux.prox;
      }
    }
    return false;
  }

  final public Start Start() throws ParseException {
  // --- JTB generated node declarations ---
  Programa n0 = null;
    n0 = Programa();
    {if (true) return new Start(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Programa Programa() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = null;
  NodeChoice n5 = null;
  GDecl n6 = null;
  FunDeclaracao n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Declaracao n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    if (jj_2_4(2)) {
      n4 = new NodeList();
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(VAR);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          n6 = GDecl();
          n5 = new NodeChoice(n6, 0, 2);
        } else if (jj_2_2(2)) {
          n7 = FunDeclaracao();
          n5 = new NodeChoice(n7, 1, 2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        n4.addNode(n5);
        if (jj_2_3(2)) {
          ;
        } else {
          break label_1;
        }
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n0.addNode(n1);
    } else {
      ;
    }
    n9 = jj_consume_token(INICIO_LITERAL);
    n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Declaracao();
    n12 = jj_consume_token(FIMALGORITMO);
    n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(0);
    n14.beginColumn++;
    n14.endColumn++;
    { n13 = JTBToolkit.makeNodeToken(n14); }
    {if (true) return new Programa(n0, n8, n10, n11, n13);}
    throw new Error("Missing return statement in function");
  }

  final public Declaracao Declaracao() throws ParseException {
  // --- JTB generated node declarations ---
  GlobalDeclaracao n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  CorpoDeclLista n2 = null;
    n0 = GlobalDeclaracao();
    label_2:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_2;
      }
      n2 = CorpoDeclLista();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new Declaracao(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public GlobalDeclaracao GlobalDeclaracao() throws ParseException {
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  GDecl n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  CorpoDeclLista n3 = null;
    label_3:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
      n1 = GDecl();
      n0.addNode(n1);
    }
    n0.nodes.trimToSize();
    label_4:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_4;
      }
      n3 = CorpoDeclLista();
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    {if (true) return new GlobalDeclaracao(n0, n2);}
    throw new Error("Missing return statement in function");
  }

/*tipo TURMA = vetor [1..20] de reais; // definição do tipo do vetor
	TURMA: VTURMA; // declaracao da variável vetor
*/
  final public GDecl GDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  DefTipo n8 = null;
  VarDeclaracao n9 = null;
    if (jj_2_8(2)) {
      n1 = new NodeSequence(4);
      n3 = jj_consume_token(Tipo);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(IDENTIFIER);
      n4 = JTBToolkit.makeNodeToken(n5);
      tr = n5;
      n1.addNode(n4);
      n7 = jj_consume_token(IGUAL);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      n8 = DefTipo();
      n1.addNode(n8);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_9(2)) {
      n9 = VarDeclaracao();
      n0 = new NodeChoice(n9, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new GDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefTipo DefTipo() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  VarDeclaracao n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeChoice n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeSequence n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeToken n41 = null;
  Token n42 = null;
  NodeList n43 = new NodeList();
  NodeSequence n44 = null;
  NodeToken n45 = null;
  Token n46 = null;
  NodeToken n47 = null;
  Token n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeToken n51 = null;
  Token n52 = null;
  NodeToken n53 = null;
  Token n54 = null;
  NodeToken n55 = null;
  Token n56 = null;
  NodeChoice n57 = null;
  NodeToken n58 = null;
  Token n59 = null;
  NodeToken n60 = null;
  Token n61 = null;
  NodeToken n62 = null;
  Token n63 = null;
    if (jj_2_16(2)) {
      n1 = new NodeSequence(5);
      n3 = jj_consume_token(Registro);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_5:
      while (true) {
        n5 = VarDeclaracao();
        n4.addNode(n5);
        if (jj_2_10(2)) {
          ;
        } else {
          break label_5;
        }
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n7 = jj_consume_token(FimRegistro);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      n9 = jj_consume_token(PONTOEVIRGULA);
      n8 = JTBToolkit.makeNodeToken(n9);
      n1.addNode(n8);
      pos = tbs.funcaohashing(num);
      num = tbs.inserir(pos, num, tr, var);
      tr = null;
      var.clear();
      n0 = new NodeChoice(n1, 0, 3);
    } else if (jj_2_17(2)) {
      n10 = new NodeSequence(10);
      n12 = jj_consume_token(VETOR);
      n11 = JTBToolkit.makeNodeToken(n12);
      t = n12;
      n10.addNode(n11);
      n14 = jj_consume_token(ACOLCHETE);
      n13 = JTBToolkit.makeNodeToken(n14);
      n10.addNode(n13);
      n16 = jj_consume_token(DIGITO);
      n15 = JTBToolkit.makeNodeToken(n16);
      n10.addNode(n15);
      n18 = jj_consume_token(PONTOS);
      n17 = JTBToolkit.makeNodeToken(n18);
      n10.addNode(n17);
      n20 = jj_consume_token(DIGITO);
      n19 = JTBToolkit.makeNodeToken(n20);
      n10.addNode(n19);
      n22 = jj_consume_token(FCOLCHETE);
      n21 = JTBToolkit.makeNodeToken(n22);
      n10.addNode(n21);
      n24 = jj_consume_token(DE);
      n23 = JTBToolkit.makeNodeToken(n24);
      n10.addNode(n23);
      if (jj_2_11(2)) {
        n27 = jj_consume_token(TIPO);
          n26 = JTBToolkit.makeNodeToken(n27);
          tipo = n27;
          n25 = new NodeChoice(n26, 0, 2);
      } else if (jj_2_12(2)) {
        n29 = jj_consume_token(IDENTIFIER);
          n28 = JTBToolkit.makeNodeToken(n29);
          tipo = n29;
          n25 = new NodeChoice(n28, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n10.addNode(n25);
      n31 = jj_consume_token(PONTOEVIRGULA);
      n30 = JTBToolkit.makeNodeToken(n31);
      n10.addNode(n30);
      pos = tbs.funcaohashing(num);
      var.add(new Variavel(t, tipo, escopo, vetor));
      num = tbs.inserir(pos, num, tr, var);
      tr = null;
      var.clear();
      n0 = new NodeChoice(n10, 1, 3);
    } else if (jj_2_18(2)) {
      n32 = new NodeSequence(11);
      n34 = jj_consume_token(MATRIZ);
      n33 = JTBToolkit.makeNodeToken(n34);
      t = n34;
      n32.addNode(n33);
      n36 = jj_consume_token(ACOLCHETE);
      n35 = JTBToolkit.makeNodeToken(n36);
      n32.addNode(n35);
      n38 = jj_consume_token(DIGITO);
      n37 = JTBToolkit.makeNodeToken(n38);
      n32.addNode(n37);
      n40 = jj_consume_token(PONTOS);
      n39 = JTBToolkit.makeNodeToken(n40);
      n32.addNode(n39);
      n42 = jj_consume_token(DIGITO);
      n41 = JTBToolkit.makeNodeToken(n42);
      n32.addNode(n41);
      label_6:
      while (true) {
        n44 = new NodeSequence(4);
        n46 = jj_consume_token(VIRGULA);
        n45 = JTBToolkit.makeNodeToken(n46);
        n44.addNode(n45);
        n48 = jj_consume_token(DIGITO);
        n47 = JTBToolkit.makeNodeToken(n48);
        n44.addNode(n47);
        n50 = jj_consume_token(PONTOS);
        n49 = JTBToolkit.makeNodeToken(n50);
        n44.addNode(n49);
        n52 = jj_consume_token(DIGITO);
        n51 = JTBToolkit.makeNodeToken(n52);
        n44.addNode(n51);
        n43.addNode(n44);
        if (jj_2_13(2)) {
          ;
        } else {
          break label_6;
        }
      }
      n43.nodes.trimToSize();
      n32.addNode(n43);
      n54 = jj_consume_token(FCOLCHETE);
      n53 = JTBToolkit.makeNodeToken(n54);
      n32.addNode(n53);
      n56 = jj_consume_token(DE);
      n55 = JTBToolkit.makeNodeToken(n56);
      n32.addNode(n55);
      if (jj_2_14(2)) {
        n59 = jj_consume_token(TIPO);
          n58 = JTBToolkit.makeNodeToken(n59);
          tipo = n59;
          n57 = new NodeChoice(n58, 0, 2);
      } else if (jj_2_15(2)) {
        n61 = jj_consume_token(IDENTIFIER);
          n60 = JTBToolkit.makeNodeToken(n61);
          tipo = n61;
          n57 = new NodeChoice(n60, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n32.addNode(n57);
      n63 = jj_consume_token(PONTOEVIRGULA);
      n62 = JTBToolkit.makeNodeToken(n63);
      n32.addNode(n62);
      pos = tbs.funcaohashing(num);
      var.add(new Variavel(t, tipo, escopo, vetor));
      num = tbs.inserir(pos, num, tr, var);
      tr = null;
      var.clear();
      n0 = new NodeChoice(n32, 2, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new DefTipo(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TipoEspecificador TipoEspecificador() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    if (jj_2_19(2)) {
      n2 = jj_consume_token(TIPO);
      n1 = JTBToolkit.makeNodeToken(n2);
      tipo = n2;
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_20(2)) {
      n4 = jj_consume_token(IDENTIFIER);
      n3 = JTBToolkit.makeNodeToken(n4);
      tipo = n4;
      n0 = new NodeChoice(n3, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new TipoEspecificador(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclaracao VarDeclaracao() throws ParseException {
  // --- JTB generated node declarations ---
  TipoEspecificador n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  VarDeclaracaoI n3 = null;
    n0 = TipoEspecificador();
    n2 = jj_consume_token(DOISPONTOS);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = VarDeclaracaoI();
    {if (true) return new VarDeclaracao(n0, n1, n3);}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclaracaoI VarDeclaracaoI() throws ParseException {
  // --- JTB generated node declarations ---
  VarListaNum n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = VarListaNum();
    n2 = jj_consume_token(PONTOEVIRGULA);
    n1 = JTBToolkit.makeNodeToken(n2);
    {if (true) return new VarDeclaracaoI(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public VarListaNum VarListaNum() throws ParseException {
  // --- JTB generated node declarations ---
  VarItemNum n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  VNum n2 = null;
    n0 = VarItemNum();
    label_7:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_7;
      }
      n2 = VNum();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new VarListaNum(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public VNum VNum() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VarItemNum n2 = null;
    n1 = jj_consume_token(VIRGULA);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = VarItemNum();
    {if (true) return new VNum(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public VarItemNum VarItemNum() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VarItemVetor n2 = null;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    t = n1;
    n2 = VarItemVetor();
    if (tr == null && tf == null) {
      if (!registroExiste() && !(tipo.toString().equals("inteiro") || tipo.toString().equals("real") || tipo.toString().equals("caractere") || tipo.toString().equals("logico"))) {
        AnaliseSemantica.EscreverArquivo("Erro o tipo \u005c"" + tipo.toString() + "\u005c" n\u00e3o existe, Linha: " + tipo.beginLine + " Coluna: " + tipo.beginColumn);
      } else {
        Telas.TabelaSintatico.Registro reg = TraducaoPortugolEmC.registroExiste(tipo.image);
        if (reg != null && (reg.variaveis.get(0).token.image.equals("vetor") || reg.variaveis.get(0).token.image.equals("matriz")))
          vetor = 1;
        pos = tbs.funcaohashing(num);
        num = tbs.inserir(pos, num, t, tipo, escopo, vetor);
        vetor = 0;
      }
    } else {
      int existe = 0;
      if (tr != null) {
        if (!registroExiste() && !(tipo.toString().equals("inteiro") || tipo.toString().equals("real") || tipo.toString().equals("caractere") || tipo.toString().equals("logico"))) {
          AnaliseSemantica.EscreverArquivo("Erro o tipo \u005c"" + tipo.toString() + "\u005c" n\u00e3o existe, Linha: " + tipo.beginLine + " Coluna: " + tipo.beginColumn);
        } else {
          for (int i = 0; i < var.size(); i++)
            if (var.get(i).token.image.equals(t.image)) {
              AnaliseSemantica.EscreverArquivo("Erro a vari\u00e1vel \u005c"" + t.toString() + "\u005c" j\u00e1  tinha sido declarada, Linha: " + t.beginLine + " Coluna: " + t.beginColumn);
              existe = 1;
            }

          if (existe == 0) {
            Telas.TabelaSintatico.Registro reg = TraducaoPortugolEmC.registroExiste(tipo.image);
            if (reg != null && (reg.variaveis.get(0).token.image.equals("vetor") || reg.variaveis.get(0).token.image.equals("matriz")))
              vetor = 1;
            var.add(new Variavel(t, tipo, escopo, vetor));
          }
        }
      } else {
        if (!registroExiste() && !(tipo.toString().equals("inteiro") || tipo.toString().equals("real") || tipo.toString().equals("caractere") || tipo.toString().equals("logico"))) {
          AnaliseSemantica.EscreverArquivo("Erro o tipo \u005c"" + tipo.toString() + "\u005c" n\u00e3o existe, Linha: " + tipo.beginLine + " Coluna: " + tipo.beginColumn);
        } else {
          for (int i = 0; i < par.size(); i++)
            if (par.get(i).token.image.equals(t.image)) {
              AnaliseSemantica.EscreverArquivo("Erro a vari\u00e1vel \u005c"" + t.toString() + "\u005c" j\u00e1  tinha sido declarada como par\u00e2metro, Linha: " + t.beginLine + " Coluna: " + t.beginColumn);
              existe = 1;
            }

          for (int i = 0; i < varLoc.size(); i++)
            if (varLoc.get(i).token.image.equals(t.image)) {
              AnaliseSemantica.EscreverArquivo("Erro a vari\u00e1vel \u005c"" + t.toString() + "\u005c" j\u00e1  tinha sido declarada, Linha: " + t.beginLine + " Coluna: " + t.beginColumn);
              existe = 1;
            }

          if (existe == 0) {
            Telas.TabelaSintatico.Registro reg = TraducaoPortugolEmC.registroExiste(tipo.image);
            if (reg != null && (reg.variaveis.get(0).token.image.equals("vetor") || reg.variaveis.get(0).token.image.equals("matriz")))
              vetor = 1;
            varLoc.add(new Variavel(t, tipo, escopo, vetor));
          }
        }
      }
      vetor = 0;
    }
    {if (true) return new VarItemNum(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public VarItemVetor VarItemVetor() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  VarComplemento n4 = null;
    if (jj_2_22(2)) {
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(RECEBE);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n4 = VarComplemento();
      n1.addNode(n4);
      n0.addNode(n1);
    } else {
      ;
    }
    {if (true) return new VarItemVetor(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarComplemento VarComplemento() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  // --- user BNFProduction java block ---
  Token valor = null;
    if (jj_2_26(2)) {
      n1 = new NodeSequence(3);
      if (jj_2_23(2)) {
        n4 = jj_consume_token(MENOS);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      } else {
        ;
      }
      n1.addNode(n2);
      n6 = jj_consume_token(DIGITO);
      n5 = JTBToolkit.makeNodeToken(n6);
      valor = n6;
      n1.addNode(n5);
      AnaliseSemantica.atribuicaoSimples(tipo, valor);
      n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_27(2)) {
      n7 = new NodeSequence(3);
      if (jj_2_24(2)) {
        n10 = jj_consume_token(MENOS);
        n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      } else {
        ;
      }
      n7.addNode(n8);
      n12 = jj_consume_token(IDENTIFIER);
      n11 = JTBToolkit.makeNodeToken(n12);
      valor = n12;
      n7.addNode(n11);
      AnaliseSemantica.atribuicaoSimples(tipo, valor);
      n0 = new NodeChoice(n7, 1, 6);
    } else if (jj_2_28(2)) {
      n13 = new NodeSequence(3);
      if (jj_2_25(2)) {
        n16 = jj_consume_token(MENOS);
        n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      } else {
        ;
      }
      n13.addNode(n14);
      n18 = jj_consume_token(PONTO_FLUTUANTE);
      n17 = JTBToolkit.makeNodeToken(n18);
      valor = n18;
      n13.addNode(n17);
      AnaliseSemantica.atribuicaoSimples(tipo, valor);
      n0 = new NodeChoice(n13, 2, 6);
    } else if (jj_2_29(2)) {
      n20 = jj_consume_token(STRING);
      n19 = JTBToolkit.makeNodeToken(n20);
      valor = n20;
      AnaliseSemantica.atribuicaoSimples(tipo, valor);
      n0 = new NodeChoice(n19, 3, 6);
    } else if (jj_2_30(2)) {
      n22 = jj_consume_token(FALSO);
      n21 = JTBToolkit.makeNodeToken(n22);
      valor = n22;
      AnaliseSemantica.atribuicaoSimples(tipo, valor);
      n0 = new NodeChoice(n21, 4, 6);
    } else if (jj_2_31(2)) {
      n24 = jj_consume_token(VERDADEIRO);
      n23 = JTBToolkit.makeNodeToken(n24);
      valor = n24;
      AnaliseSemantica.atribuicaoSimples(tipo, valor);
      n0 = new NodeChoice(n23, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new VarComplemento(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FunDeclaracao FunDeclaracao() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  Params n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  CompostoDecl n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  // --- user BNFProduction java block ---
  escopo = 1;
    n1 = jj_consume_token(MODULO);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
    n2 = JTBToolkit.makeNodeToken(n3);
    tf = n3;
    n5 = jj_consume_token(APARENTESE);
    n4 = JTBToolkit.makeNodeToken(n5);
    if (jj_2_32(2)) {
      n7 = Params();
      n6.addNode(n7);
    } else {
      ;
    }
    n9 = jj_consume_token(FPARENTESE);
    n8 = JTBToolkit.makeNodeToken(n9);
    n10 = CompostoDecl();
    n12 = jj_consume_token(FIMMODULO);
    n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(PONTOEVIRGULA);
    n13 = JTBToolkit.makeNodeToken(n14);
    pos = tbs.funcaohashing(num);
    num = tbs.inserir(pos, num, tf, par, varLoc, tipoFuncao);
    tf = null;
    escopo = 0;
    par.clear();
    varLoc.clear();
    tipoFuncao = null;
    {if (true) return new FunDeclaracao(n0, n2, n4, n6, n8, n10, n11, n13);}
    throw new Error("Missing return statement in function");
  }

  final public Params Params() throws ParseException {
  // --- JTB generated node declarations ---
  ParamLista n0 = null;
    n0 = ParamLista();
    {if (true) return new Params(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ParamLista ParamLista() throws ParseException {
  // --- JTB generated node declarations ---
  Param n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  PParam n2 = null;
    n0 = Param();
    label_8:
    while (true) {
      if (jj_2_33(2)) {
        ;
      } else {
        break label_8;
      }
      n2 = PParam();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new ParamLista(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PParam PParam() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Param n2 = null;
    n1 = jj_consume_token(VIRGULA);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Param();
    {if (true) return new PParam(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public Param Param() throws ParseException {
  // --- JTB generated node declarations ---
  TipoEspecificador n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  ParamI n6 = null;
    n0 = TipoEspecificador();
    n2 = jj_consume_token(DOISPONTOS);
    n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(IDENTIFIER);
    n3 = JTBToolkit.makeNodeToken(n4);
    t = n4;
    if (jj_2_34(2)) {
      n6 = ParamI();
      n5.addNode(n6);
    } else {
      ;
    }
    if (!registroExiste() && !(tipo.toString().equals("inteiro") || tipo.toString().equals("real") || tipo.toString().equals("caractere") || tipo.toString().equals("logico"))) {
      AnaliseSemantica.EscreverArquivo("Erro o tipo \u005c"" + tipo.toString() + "\u005c" n\u00e3o existe, Linha: " + tipo.beginLine + " Coluna: " + tipo.beginColumn);
    } else {
      int existe = 0;
      for (int i = 0; i < par.size(); i++)
        if (par.get(i).token.image.equals(t.image)) {
          AnaliseSemantica.EscreverArquivo("Erro a vari\u00e1vel \u005c"" + t.toString() + "\u005c" j\u00e1  tinha sido declarada, Linha: " + t.beginLine + " Coluna: " + t.beginColumn);
          existe = 1;
        }

      if (existe == 0) {
        Telas.TabelaSintatico.Registro reg = TraducaoPortugolEmC.registroExiste(tipo.image);
        if (reg != null && (reg.variaveis.get(0).token.image.equals("vetor") || reg.variaveis.get(0).token.image.equals("matriz")))
          vetor = 1;
        par.add(new Variavel(t, tipo, escopo, vetor));
      }
    }
    vetor = 0;
    {if (true) return new Param(n0, n1, n3, n5);}
    throw new Error("Missing return statement in function");
  }

  final public ParamI ParamI() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  ParamIVetor n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  // --- user BNFProduction java block ---
  Token t1 = null;
    n1 = jj_consume_token(ACOLCHETE);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_37(2)) {
      if (jj_2_35(2)) {
        n5 = jj_consume_token(DIGITO);
        n4 = JTBToolkit.makeNodeToken(n5);
        n3 = new NodeChoice(n4, 0, 2);
      } else if (jj_2_36(2)) {
        n7 = jj_consume_token(IDENTIFIER);
        n6 = JTBToolkit.makeNodeToken(n7);
        t1 = n7;
        n3 = new NodeChoice(n6, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
    } else {
      ;
    }
    label_9:
    while (true) {
      if (jj_2_38(2)) {
        ;
      } else {
        break label_9;
      }
      n9 = ParamIVetor();
      n8.addNode(n9);
    }
    n8.nodes.trimToSize();
    n11 = jj_consume_token(FCOLCHETE);
    n10 = JTBToolkit.makeNodeToken(n11);
    vetor = 1;
    AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
    {if (true) return new ParamI(n0, n2, n8, n10);}
    throw new Error("Missing return statement in function");
  }

  final public ParamIVetor ParamIVetor() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  // --- user BNFProduction java block ---
  Token t1 = null;
    n1 = jj_consume_token(VIRGULA);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_39(2)) {
      n4 = jj_consume_token(DIGITO);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2 = new NodeChoice(n3, 0, 2);
    } else if (jj_2_40(2)) {
      n6 = jj_consume_token(IDENTIFIER);
        n5 = JTBToolkit.makeNodeToken(n6);
        t1 = n6;
        n2 = new NodeChoice(n5, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
    {if (true) return new ParamIVetor(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public CompostoDecl CompostoDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  LocalDeclaracoes n1 = null;
  CorpoDeclLista n2 = null;
    label_10:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_10;
      }
      n1 = LocalDeclaracoes();
      n0.addNode(n1);
    }
    n0.nodes.trimToSize();
    n2 = CorpoDeclLista();
    {if (true) return new CompostoDecl(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public LocalDeclaracoes LocalDeclaracoes() throws ParseException {
  // --- JTB generated node declarations ---
  VarDeclaracao n0 = null;
    n0 = VarDeclaracao();
    {if (true) return new LocalDeclaracoes(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CorpoDeclLista CorpoDeclLista() throws ParseException {
  // --- JTB generated node declarations ---
  Corpo n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  CLista n2 = null;
    n0 = Corpo();
    label_11:
    while (true) {
      if (jj_2_42(2)) {
        ;
      } else {
        break label_11;
      }
      n2 = CLista();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new CorpoDeclLista(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public CLista CLista() throws ParseException {
  // --- JTB generated node declarations ---
  Corpo n0 = null;
    n0 = Corpo();
    {if (true) return new CLista(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Corpo Corpo() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ExpressaoDecl n1 = null;
  SelecaoDecl n2 = null;
  EscolhaDecl n3 = null;
  IteracaoDecl n4 = null;
  RetornoDecl n5 = null;
  EntradaSaidaDecl n6 = null;
  GDecl n7 = null;
    if (jj_2_43(2)) {
      n1 = ExpressaoDecl();
      n0 = new NodeChoice(n1, 0, 7);
    } else if (jj_2_44(2)) {
      n2 = SelecaoDecl();
      n0 = new NodeChoice(n2, 1, 7);
    } else if (jj_2_45(2)) {
      n3 = EscolhaDecl();
      n0 = new NodeChoice(n3, 2, 7);
    } else if (jj_2_46(2)) {
      n4 = IteracaoDecl();
      n0 = new NodeChoice(n4, 3, 7);
    } else if (jj_2_47(2)) {
      n5 = RetornoDecl();
      n0 = new NodeChoice(n5, 4, 7);
    } else if (jj_2_48(2)) {
      n6 = EntradaSaidaDecl();
      n0 = new NodeChoice(n6, 5, 7);
    } else if (jj_2_49(2)) {
      n7 = GDecl();
      n0 = new NodeChoice(n7, 6, 7);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Corpo(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressaoDecl ExpressaoDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Expressao n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    if (jj_2_50(2)) {
      n1 = new NodeSequence(2);
      n2 = Expressao();
      n1.addNode(n2);
      n4 = jj_consume_token(PONTOEVIRGULA);
      n3 = JTBToolkit.makeNodeToken(n4);
      n1.addNode(n3);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_51(2)) {
      n6 = jj_consume_token(PONTOEVIRGULA);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ExpressaoDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelecaoDecl SelecaoDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  CondicaoDecl n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SelecaoDeclI n9 = null;
    n1 = jj_consume_token(SE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(APARENTESE);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = CondicaoDecl();
    n6 = jj_consume_token(FPARENTESE);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(ENTAO);
    n7 = JTBToolkit.makeNodeToken(n8);
    n9 = SelecaoDeclI();
    {if (true) return new SelecaoDecl(n0, n2, n4, n5, n7, n9);}
    throw new Error("Missing return statement in function");
  }

  final public SelecaoDeclI SelecaoDeclI() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  Corpo n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  SelecaoDeclII n10 = null;
  NodeSequence n11 = null;
  NodeList n12 = new NodeList();
  Corpo n13 = null;
  SelecaoDeclII n14 = null;
    if (jj_2_54(2)) {
      n1 = new NodeSequence(5);
      n3 = jj_consume_token(INICIO_LITERAL);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_12:
      while (true) {
        n5 = Corpo();
        n4.addNode(n5);
        if (jj_2_52(2)) {
          ;
        } else {
          break label_12;
        }
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n7 = jj_consume_token(FIM_LITERAL);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      n9 = jj_consume_token(PONTOEVIRGULA);
      n8 = JTBToolkit.makeNodeToken(n9);
      n1.addNode(n8);
      n10 = SelecaoDeclII();
      n1.addNode(n10);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_55(2)) {
      n11 = new NodeSequence(2);
      label_13:
      while (true) {
        n13 = Corpo();
        n12.addNode(n13);
        if (jj_2_53(2)) {
          ;
        } else {
          break label_13;
        }
      }
      n12.nodes.trimToSize();
      n11.addNode(n12);
      n14 = SelecaoDeclII();
      n11.addNode(n14);
      n0 = new NodeChoice(n11, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new SelecaoDeclI(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelecaoDeclII SelecaoDeclII() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SelecaoDeclIII n9 = null;
    if (jj_2_56(2)) {
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(FIMSE);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(PONTOEVIRGULA);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_57(2)) {
      n6 = new NodeSequence(2);
      n8 = jj_consume_token(SENAO);
      n7 = JTBToolkit.makeNodeToken(n8);
      n6.addNode(n7);
      n9 = SelecaoDeclIII();
      n6.addNode(n9);
      n0 = new NodeChoice(n6, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new SelecaoDeclII(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelecaoDeclIII SelecaoDeclIII() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  Corpo n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeSequence n14 = null;
  NodeList n15 = new NodeList();
  Corpo n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
    if (jj_2_60(2)) {
      n1 = new NodeSequence(6);
      n3 = jj_consume_token(INICIO_LITERAL);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_14:
      while (true) {
        n5 = Corpo();
        n4.addNode(n5);
        if (jj_2_58(2)) {
          ;
        } else {
          break label_14;
        }
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n7 = jj_consume_token(FIM_LITERAL);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      n9 = jj_consume_token(PONTOEVIRGULA);
      n8 = JTBToolkit.makeNodeToken(n9);
      n1.addNode(n8);
      n11 = jj_consume_token(FIMSE);
      n10 = JTBToolkit.makeNodeToken(n11);
      n1.addNode(n10);
      n13 = jj_consume_token(PONTOEVIRGULA);
      n12 = JTBToolkit.makeNodeToken(n13);
      n1.addNode(n12);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_61(2)) {
      n14 = new NodeSequence(3);
      label_15:
      while (true) {
        n16 = Corpo();
        n15.addNode(n16);
        if (jj_2_59(2)) {
          ;
        } else {
          break label_15;
        }
      }
      n15.nodes.trimToSize();
      n14.addNode(n15);
      n18 = jj_consume_token(FIMSE);
      n17 = JTBToolkit.makeNodeToken(n18);
      n14.addNode(n17);
      n20 = jj_consume_token(PONTOEVIRGULA);
      n19 = JTBToolkit.makeNodeToken(n20);
      n14.addNode(n19);
      n0 = new NodeChoice(n14, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new SelecaoDeclIII(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IteracaoDecl IteracaoDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  CondicaoDecl n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeList n11 = new NodeList();
  Corpo n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeList n20 = new NodeList();
  Corpo n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  CondicaoDecl n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeSequence n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeToken n42 = null;
  Token n43 = null;
  IteracaoDeclI n44 = null;
  // --- user BNFProduction java block ---
  Token t1 = null;
    if (jj_2_64(2)) {
      n1 = new NodeSequence(8);
      n3 = jj_consume_token(ENQUANTO);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(APARENTESE);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      n6 = CondicaoDecl();
      n1.addNode(n6);
      n8 = jj_consume_token(FPARENTESE);
      n7 = JTBToolkit.makeNodeToken(n8);
      n1.addNode(n7);
      n10 = jj_consume_token(FACA);
      n9 = JTBToolkit.makeNodeToken(n10);
      n1.addNode(n9);
      label_16:
      while (true) {
        n12 = Corpo();
        n11.addNode(n12);
        if (jj_2_62(2)) {
          ;
        } else {
          break label_16;
        }
      }
      n11.nodes.trimToSize();
      n1.addNode(n11);
      n14 = jj_consume_token(FIMENQUANTO);
      n13 = JTBToolkit.makeNodeToken(n14);
      n1.addNode(n13);
      n16 = jj_consume_token(PONTOEVIRGULA);
      n15 = JTBToolkit.makeNodeToken(n16);
      n1.addNode(n15);
      n0 = new NodeChoice(n1, 0, 3);
    } else if (jj_2_65(2)) {
      n17 = new NodeSequence(7);
      n19 = jj_consume_token(REPITA);
      n18 = JTBToolkit.makeNodeToken(n19);
      n17.addNode(n18);
      label_17:
      while (true) {
        n21 = Corpo();
        n20.addNode(n21);
        if (jj_2_63(2)) {
          ;
        } else {
          break label_17;
        }
      }
      n20.nodes.trimToSize();
      n17.addNode(n20);
      n23 = jj_consume_token(ATE);
      n22 = JTBToolkit.makeNodeToken(n23);
      n17.addNode(n22);
      n25 = jj_consume_token(APARENTESE);
      n24 = JTBToolkit.makeNodeToken(n25);
      n17.addNode(n24);
      n26 = CondicaoDecl();
      n17.addNode(n26);
      n28 = jj_consume_token(FPARENTESE);
      n27 = JTBToolkit.makeNodeToken(n28);
      n17.addNode(n27);
      n30 = jj_consume_token(PONTOEVIRGULA);
      n29 = JTBToolkit.makeNodeToken(n30);
      n17.addNode(n29);
      n0 = new NodeChoice(n17, 1, 3);
    } else if (jj_2_66(2)) {
      n31 = new NodeSequence(8);
      n33 = jj_consume_token(PARA);
      n32 = JTBToolkit.makeNodeToken(n33);
      n31.addNode(n32);
      n35 = jj_consume_token(IDENTIFIER);
      n34 = JTBToolkit.makeNodeToken(n35);
      t1 = n35;
      n31.addNode(n34);
      n37 = jj_consume_token(DE);
      n36 = JTBToolkit.makeNodeToken(n37);
      n31.addNode(n36);
      n39 = jj_consume_token(DIGITO);
      n38 = JTBToolkit.makeNodeToken(n39);
      n31.addNode(n38);
      n41 = jj_consume_token(ATE);
      n40 = JTBToolkit.makeNodeToken(n41);
      n31.addNode(n40);
      n43 = jj_consume_token(DIGITO);
      n42 = JTBToolkit.makeNodeToken(n43);
      n31.addNode(n42);
      n44 = IteracaoDeclI();
      n31.addNode(n44);
      AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
      n0 = new NodeChoice(n31, 2, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new IteracaoDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IteracaoDeclI IteracaoDeclI() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  Corpo n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeList n20 = new NodeList();
  Corpo n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
    if (jj_2_70(2)) {
      n1 = new NodeSequence(4);
      n3 = jj_consume_token(FACA);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_18:
      while (true) {
        n5 = Corpo();
        n4.addNode(n5);
        if (jj_2_67(2)) {
          ;
        } else {
          break label_18;
        }
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n7 = jj_consume_token(FIMPARA);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      n9 = jj_consume_token(PONTOEVIRGULA);
      n8 = JTBToolkit.makeNodeToken(n9);
      n1.addNode(n8);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_71(2)) {
      n10 = new NodeSequence(7);
      n12 = jj_consume_token(PASSO);
      n11 = JTBToolkit.makeNodeToken(n12);
      n10.addNode(n11);
      if (jj_2_68(2)) {
        n15 = jj_consume_token(MENOS);
        n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      } else {
        ;
      }
      n10.addNode(n13);
      n17 = jj_consume_token(DIGITO);
      n16 = JTBToolkit.makeNodeToken(n17);
      n10.addNode(n16);
      n19 = jj_consume_token(FACA);
      n18 = JTBToolkit.makeNodeToken(n19);
      n10.addNode(n18);
      label_19:
      while (true) {
        n21 = Corpo();
        n20.addNode(n21);
        if (jj_2_69(2)) {
          ;
        } else {
          break label_19;
        }
      }
      n20.nodes.trimToSize();
      n10.addNode(n20);
      n23 = jj_consume_token(FIMPARA);
      n22 = JTBToolkit.makeNodeToken(n23);
      n10.addNode(n22);
      n25 = jj_consume_token(PONTOEVIRGULA);
      n24 = JTBToolkit.makeNodeToken(n25);
      n10.addNode(n24);
      n0 = new NodeChoice(n10, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new IteracaoDeclI(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RetornoDecl RetornoDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RetornoDeclI n2 = null;
  // --- user BNFProduction java block ---
  retorno = 1;
    n1 = jj_consume_token(RETORNE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RetornoDeclI();
    retorno = 0;
    {if (true) return new RetornoDecl(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public RetornoDeclI RetornoDeclI() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  Expressao n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    if (jj_2_72(2)) {
      n2 = jj_consume_token(PONTOEVIRGULA);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 5);
    } else if (jj_2_73(2)) {
      n3 = new NodeSequence(2);
      n4 = Expressao();
      n3.addNode(n4);
      n6 = jj_consume_token(PONTOEVIRGULA);
      n5 = JTBToolkit.makeNodeToken(n6);
      n3.addNode(n5);
      n0 = new NodeChoice(n3, 1, 5);
    } else if (jj_2_74(2)) {
      n8 = jj_consume_token(FALSO);
      n7 = JTBToolkit.makeNodeToken(n8);
      tipoFuncao = "logico";
      n0 = new NodeChoice(n7, 2, 5);
    } else if (jj_2_75(2)) {
      n10 = jj_consume_token(VERDADEIRO);
      n9 = JTBToolkit.makeNodeToken(n10);
      tipoFuncao = "logico";
      n0 = new NodeChoice(n9, 3, 5);
    } else if (jj_2_76(2)) {
      n12 = jj_consume_token(STRING);
      n11 = JTBToolkit.makeNodeToken(n12);
      tipoFuncao = "caractere";
      n0 = new NodeChoice(n11, 4, 5);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RetornoDeclI(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EntradaSaidaDecl EntradaSaidaDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Lendo n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Escrevendo n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
    if (jj_2_77(2)) {
      n1 = new NodeSequence(5);
      n3 = jj_consume_token(LEIA);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(APARENTESE);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      n6 = Lendo();
      n1.addNode(n6);
      n8 = jj_consume_token(FPARENTESE);
      n7 = JTBToolkit.makeNodeToken(n8);
      n1.addNode(n7);
      n10 = jj_consume_token(PONTOEVIRGULA);
      n9 = JTBToolkit.makeNodeToken(n10);
      n1.addNode(n9);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_78(2)) {
      n11 = new NodeSequence(5);
      n13 = jj_consume_token(ESCREVA);
      n12 = JTBToolkit.makeNodeToken(n13);
      n11.addNode(n12);
      n15 = jj_consume_token(APARENTESE);
      n14 = JTBToolkit.makeNodeToken(n15);
      n11.addNode(n14);
      n16 = Escrevendo();
      n11.addNode(n16);
      n18 = jj_consume_token(FPARENTESE);
      n17 = JTBToolkit.makeNodeToken(n18);
      n11.addNode(n17);
      n20 = jj_consume_token(PONTOEVIRGULA);
      n19 = JTBToolkit.makeNodeToken(n20);
      n11.addNode(n19);
      n0 = new NodeChoice(n11, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new EntradaSaidaDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Lendo Lendo() throws ParseException {
  // --- JTB generated node declarations ---
  VarLerNum n0 = null;
    n0 = VarLerNum();

    {if (true) return new Lendo(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarLerNum VarLerNum() throws ParseException {
  // --- JTB generated node declarations ---
  VarItemLerNum n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  VLerNum n2 = null;
    n0 = VarItemLerNum();
    label_20:
    while (true) {
      if (jj_2_79(2)) {
        ;
      } else {
        break label_20;
      }
      n2 = VLerNum();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new VarLerNum(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public VLerNum VLerNum() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VarLerNum n2 = null;
    n1 = jj_consume_token(VIRGULA);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = VarLerNum();
    {if (true) return new VLerNum(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public VarItemLerNum VarItemLerNum() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VarLerVetor n2 = null;
  // --- user BNFProduction java block ---
  Token t1 = null;
  atribuicaoComposta = "2";
  atribuicao.clear();
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    t1 = n1;
    n2 = VarLerVetor();
    atribuicao.add(new registro(t1, reg, null));
    AnaliseSemantica.atribuicaoComposta(atribuicao, varLoc, par);
    reg = null;
    atribuicao.clear();
    atribuicaoComposta = null;
    {if (true) return new VarItemLerNum(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public VarLerVetor VarLerVetor() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = null;
  ParamIVetor n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeOptional n20 = null;
  NodeSequence n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeChoice n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeListOptional n29 = null;
  ParamIVetor n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeSequence n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeOptional n38 = null;
  NodeSequence n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeChoice n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  NodeToken n45 = null;
  Token n46 = null;
  NodeListOptional n47 = null;
  ParamIVetor n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  // --- user BNFProduction java block ---
  Token t2 = null;
  Token t1 = null;
    if (jj_2_94(2)) {
      n10 = new NodeListOptional();
      n14 = new NodeOptional();
      n38 = new NodeOptional();
      if (jj_2_92(2)) {
        n2 = new NodeSequence(6);
        n4 = jj_consume_token(ACOLCHETE);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        if (jj_2_80(2)) {
          n7 = jj_consume_token(DIGITO);
            n6 = JTBToolkit.makeNodeToken(n7);
            n5 = new NodeChoice(n6, 0, 2);
        } else if (jj_2_81(2)) {
          n9 = jj_consume_token(IDENTIFIER);
            n8 = JTBToolkit.makeNodeToken(n9);
            t2 = n9;
            n5 = new NodeChoice(n8, 1, 2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        n2.addNode(n5);
        label_21:
        while (true) {
          if (jj_2_82(2)) {
            ;
          } else {
            break label_21;
          }
          n11 = ParamIVetor();
          n10.addNode(n11);
        }
        n10.nodes.trimToSize();
        n2.addNode(n10);
        n13 = jj_consume_token(FCOLCHETE);
        n12 = JTBToolkit.makeNodeToken(n13);
        n2.addNode(n12);
        if (jj_2_87(2)) {
          n20 = new NodeOptional();
          n15 = new NodeSequence(3);
          n17 = jj_consume_token(PONTO);
          n16 = JTBToolkit.makeNodeToken(n17);
          n15.addNode(n16);
          n19 = jj_consume_token(IDENTIFIER);
          n18 = JTBToolkit.makeNodeToken(n19);
          reg = n19;
          n15.addNode(n18);
          if (jj_2_86(2)) {
            n29 = new NodeListOptional();
            n21 = new NodeSequence(4);
            n23 = jj_consume_token(ACOLCHETE);
            n22 = JTBToolkit.makeNodeToken(n23);
            n21.addNode(n22);
            if (jj_2_83(2)) {
              n26 = jj_consume_token(DIGITO);
                n25 = JTBToolkit.makeNodeToken(n26);
                n24 = new NodeChoice(n25, 0, 2);
            } else if (jj_2_84(2)) {
              n28 = jj_consume_token(IDENTIFIER);
                n27 = JTBToolkit.makeNodeToken(n28);
                t1 = n28;
                n24 = new NodeChoice(n27, 1, 2);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            n21.addNode(n24);
            label_22:
            while (true) {
              if (jj_2_85(2)) {
                ;
              } else {
                break label_22;
              }
              n30 = ParamIVetor();
              n29.addNode(n30);
            }
            n29.nodes.trimToSize();
            n21.addNode(n29);
            n32 = jj_consume_token(FCOLCHETE);
            n31 = JTBToolkit.makeNodeToken(n32);
            n21.addNode(n31);
            n20.addNode(n21);
          } else {
            ;
          }
          n15.addNode(n20);
          n14.addNode(n15);
        } else {
          ;
        }
        n2.addNode(n14);
        AnaliseSemantica.LerVariavelExiste(t2, null, varLoc, par);
        AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
        n1 = new NodeChoice(n2, 0, 2);
      } else if (jj_2_93(2)) {
        n33 = new NodeSequence(4);
        n35 = jj_consume_token(PONTO);
        n34 = JTBToolkit.makeNodeToken(n35);
        n33.addNode(n34);
        n37 = jj_consume_token(IDENTIFIER);
        n36 = JTBToolkit.makeNodeToken(n37);
        reg = n37;
        n33.addNode(n36);
        if (jj_2_91(2)) {
          n47 = new NodeListOptional();
          n39 = new NodeSequence(4);
          n41 = jj_consume_token(ACOLCHETE);
          n40 = JTBToolkit.makeNodeToken(n41);
          n39.addNode(n40);
          if (jj_2_88(2)) {
            n44 = jj_consume_token(DIGITO);
              n43 = JTBToolkit.makeNodeToken(n44);
              n42 = new NodeChoice(n43, 0, 2);
          } else if (jj_2_89(2)) {
            n46 = jj_consume_token(IDENTIFIER);
              n45 = JTBToolkit.makeNodeToken(n46);
              t2 = n46;
              n42 = new NodeChoice(n45, 1, 2);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          n39.addNode(n42);
          label_23:
          while (true) {
            if (jj_2_90(2)) {
              ;
            } else {
              break label_23;
            }
            n48 = ParamIVetor();
            n47.addNode(n48);
          }
          n47.nodes.trimToSize();
          n39.addNode(n47);
          n50 = jj_consume_token(FCOLCHETE);
          n49 = JTBToolkit.makeNodeToken(n50);
          n39.addNode(n49);
          n38.addNode(n39);
        } else {
          ;
        }
        n33.addNode(n38);
        AnaliseSemantica.LerVariavelExiste(t2, null, varLoc, par);
        n1 = new NodeChoice(n33, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n0.addNode(n1);
    } else {
      ;
    }
    {if (true) return new VarLerVetor(n0);}
    throw new Error("Missing return statement in function");
  }

/*void VarLerVetor():
{}
{
  (
    (< ACOLCHETE > (< DIGITO > | t1 = < IDENTIFIER >)? (ParamIVetor())* < FCOLCHETE >IndiceVetor())+ (< PONTO > reg = < IDENTIFIER > (IndiceVetor())* )? 
	| < PONTO > reg = < IDENTIFIER > (IndiceVetor())*
  )?
}*/
  final public Escrevendo Escrevendo() throws ParseException {
  // --- JTB generated node declarations ---
  EscreveItem n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  EscrevendoRec n2 = null;
    n0 = EscreveItem();
    label_24:
    while (true) {
      if (jj_2_95(2)) {
        ;
      } else {
        break label_24;
      }
      n2 = EscrevendoRec();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new Escrevendo(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public EscrevendoRec EscrevendoRec() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  EscreveItem n2 = null;
    n1 = jj_consume_token(VIRGULA);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EscreveItem();
    {if (true) return new EscrevendoRec(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public EscreveItem EscreveItem() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  VarLerVetor n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  // --- user BNFProduction java block ---
  Token t1 = null;
  atribuicaoComposta = "2";
  atribuicao.clear();
    if (jj_2_96(2)) {
      n1 = new NodeSequence(3);
      n3 = jj_consume_token(IDENTIFIER);
      n2 = JTBToolkit.makeNodeToken(n3);
      t1 = n3;
      n1.addNode(n2);
      n4 = VarLerVetor();
      n1.addNode(n4);
      atribuicao.add(new registro(t1, reg, null));
      AnaliseSemantica.atribuicaoComposta(atribuicao, varLoc, par);
      reg = null;
      atribuicao.clear();
      atribuicaoComposta = null;
      n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_97(2)) {
      n6 = jj_consume_token(STRING);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 1, 6);
    } else if (jj_2_98(2)) {
      n8 = jj_consume_token(FALSO);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 2, 6);
    } else if (jj_2_99(2)) {
      n10 = jj_consume_token(VERDADEIRO);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 3, 6);
    } else if (jj_2_100(2)) {
      n12 = jj_consume_token(DIGITO);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 4, 6);
    } else if (jj_2_101(2)) {
      n14 = jj_consume_token(PONTO_FLUTUANTE);
      n13 = JTBToolkit.makeNodeToken(n14);
      n0 = new NodeChoice(n13, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new EscreveItem(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EscolhaDecl EscolhaDecl() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  EscolhaCaso n4 = null;
  NodeOptional n5 = new NodeOptional();
  EscolhaExcessao n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  // --- user BNFProduction java block ---
  Token t1 = null;
    n1 = jj_consume_token(Escolha);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
    n2 = JTBToolkit.makeNodeToken(n3);
    t1 = n3;
    n4 = EscolhaCaso();
    if (jj_2_102(2)) {
      n6 = EscolhaExcessao();
      n5.addNode(n6);
    } else {
      ;
    }
    n8 = jj_consume_token(FimEscolha);
    n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(PONTOEVIRGULA);
    n9 = JTBToolkit.makeNodeToken(n10);
    AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
    {if (true) return new EscolhaDecl(n0, n2, n4, n5, n7, n9);}
    throw new Error("Missing return statement in function");
  }

  final public EscolhaCaso EscolhaCaso() throws ParseException {
  // --- JTB generated node declarations ---
  EscCaso n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  EscolhaRec n2 = null;
    n0 = EscCaso();
    label_25:
    while (true) {
      if (jj_2_103(2)) {
        ;
      } else {
        break label_25;
      }
      n2 = EscolhaRec();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new EscolhaCaso(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public EscolhaRec EscolhaRec() throws ParseException {
  // --- JTB generated node declarations ---
  EscCaso n0 = null;
    n0 = EscCaso();
    {if (true) return new EscolhaRec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EscCaso EscCaso() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeList n6 = new NodeList();
  Corpo n7 = null;
    n1 = jj_consume_token(Caso);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DIGITO);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(DOISPONTOS);
    n4 = JTBToolkit.makeNodeToken(n5);
    label_26:
    while (true) {
      n7 = Corpo();
      n6.addNode(n7);
      if (jj_2_104(2)) {
        ;
      } else {
        break label_26;
      }
    }
    n6.nodes.trimToSize();
    {if (true) return new EscCaso(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  final public EscolhaExcessao EscolhaExcessao() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeList n6 = new NodeList();
  Corpo n7 = null;
    n1 = jj_consume_token(Caso);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(Contrario);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(DOISPONTOS);
    n4 = JTBToolkit.makeNodeToken(n5);
    label_27:
    while (true) {
      n7 = Corpo();
      n6.addNode(n7);
      if (jj_2_105(2)) {
        ;
      } else {
        break label_27;
      }
    }
    n6.nodes.trimToSize();
    {if (true) return new EscolhaExcessao(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  final public Expressao Expressao() throws ParseException {
  // --- JTB generated node declarations ---
  SimplesEpressao n0 = null;
    n0 = SimplesEpressao();
    tipoFuncao = AnaliseSemantica.atribuicaoComposta(atribuicao, varLoc, par);
    if (retorno == 0)
      tipoFuncao = null;
    atribuicaoComposta = null;
    atrib = 0;
    atribuicao.clear();
    {if (true) return new Expressao(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CondicaoDecl CondicaoDecl() throws ParseException {
  // --- JTB generated node declarations ---
  ExpressaoRelacional n0 = null;
  Relacional n1 = null;
  ExpressaoRelacional n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  Logico n5 = null;
  ExpressaoRelacional n6 = null;
  Relacional n7 = null;
  ExpressaoRelacional n8 = null;
    n0 = ExpressaoRelacional();
    n1 = Relacional();
    n2 = ExpressaoRelacional();
    label_28:
    while (true) {
      if (jj_2_106(2)) {
        ;
      } else {
        break label_28;
      }
      n4 = new NodeSequence(4);
      n5 = Logico();
      n4.addNode(n5);
      n6 = ExpressaoRelacional();
      n4.addNode(n6);
      n7 = Relacional();
      n4.addNode(n7);
      n8 = ExpressaoRelacional();
      n4.addNode(n8);
      n3.addNode(n4);
    }
    n3.nodes.trimToSize();
    AnaliseSemantica.comparacaoRelacional(relacional, varLoc, par);
    relacional.clear();
    {if (true) return new CondicaoDecl(n0, n1, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public Valor Valor() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  Var n14 = null;
  NodeSequence n15 = null;
  NodeOptional n16 = new NodeOptional();
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  // --- user BNFProduction java block ---
  Token token = null;
  atribuicaoComposta = "2";
    if (jj_2_111(2)) {
      n1 = new NodeSequence(3);
      if (jj_2_107(2)) {
        n4 = jj_consume_token(MENOS);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      } else {
        ;
      }
      n1.addNode(n2);
      n6 = jj_consume_token(DIGITO);
      n5 = JTBToolkit.makeNodeToken(n6);
      token = n6;
      n1.addNode(n5);
      relacional.add(new registro(token, reg, null));
      atribuicaoComposta = null;
      n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_112(2)) {
      n7 = new NodeSequence(4);
      if (jj_2_108(2)) {
        n10 = jj_consume_token(MENOS);
        n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      } else {
        ;
      }
      n7.addNode(n8);
      n12 = jj_consume_token(IDENTIFIER);
      n11 = JTBToolkit.makeNodeToken(n12);
      token = n12;
      n7.addNode(n11);
      if (jj_2_109(2)) {
        n14 = Var();
        n13.addNode(n14);
      } else {
        ;
      }
      n7.addNode(n13);
      relacional.add(new registro(token, reg, null));
      reg = null;
      atribuicaoComposta = null;
      n0 = new NodeChoice(n7, 1, 6);
    } else if (jj_2_113(2)) {
      n15 = new NodeSequence(3);
      if (jj_2_110(2)) {
        n18 = jj_consume_token(MENOS);
        n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      } else {
        ;
      }
      n15.addNode(n16);
      n20 = jj_consume_token(PONTO_FLUTUANTE);
      n19 = JTBToolkit.makeNodeToken(n20);
      token = n20;
      n15.addNode(n19);
      relacional.add(new registro(token, reg, null));
      atribuicaoComposta = null;
      n0 = new NodeChoice(n15, 2, 6);
    } else if (jj_2_114(2)) {
      n22 = jj_consume_token(STRING);
      n21 = JTBToolkit.makeNodeToken(n22);
      token = n22;
      relacional.add(new registro(token, reg, null));
      atribuicaoComposta = null;
      n0 = new NodeChoice(n21, 3, 6);
    } else if (jj_2_115(2)) {
      n24 = jj_consume_token(VERDADEIRO);
      n23 = JTBToolkit.makeNodeToken(n24);
      token = n24;
      relacional.add(new registro(token, reg, null));
      atribuicaoComposta = null;
      n0 = new NodeChoice(n23, 4, 6);
    } else if (jj_2_116(2)) {
      n26 = jj_consume_token(FALSO);
      n25 = JTBToolkit.makeNodeToken(n26);
      token = n26;
      relacional.add(new registro(token, reg, null));
      atribuicaoComposta = null;
      n0 = new NodeChoice(n25, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Valor(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressaoRelacional ExpressaoRelacional() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Valor n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Valor n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    if (jj_2_117(2)) {
      n1 = Valor();
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_118(2)) {
      n2 = new NodeSequence(3);
      n4 = jj_consume_token(APARENTESE);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Valor();
      n2.addNode(n5);
      n7 = jj_consume_token(FPARENTESE);
      n6 = JTBToolkit.makeNodeToken(n7);
      n2.addNode(n6);
      n0 = new NodeChoice(n2, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ExpressaoRelacional(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SimplesEpressao SimplesEpressao() throws ParseException {
  // --- JTB generated node declarations ---
  SomaExpressao n0 = null;
    n0 = SomaExpressao();
    {if (true) return new SimplesEpressao(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Relacional Relacional() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    if (jj_2_119(2)) {
      n2 = jj_consume_token(MENORIGUAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_120(2)) {
      n4 = jj_consume_token(MENOR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 6);
    } else if (jj_2_121(2)) {
      n6 = jj_consume_token(MAIOR);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 6);
    } else if (jj_2_122(2)) {
      n8 = jj_consume_token(MAIORIGUAL);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 6);
    } else if (jj_2_123(2)) {
      n10 = jj_consume_token(IGUAL);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 6);
    } else if (jj_2_124(2)) {
      n12 = jj_consume_token(DIFERENTE);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Relacional(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Logico Logico() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    if (jj_2_125(2)) {
      n2 = jj_consume_token(E);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
    } else if (jj_2_126(2)) {
      n4 = jj_consume_token(OU);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 3);
    } else if (jj_2_127(2)) {
      n6 = jj_consume_token(NAO);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Logico(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SomaExpressao SomaExpressao() throws ParseException {
  // --- JTB generated node declarations ---
  Termo n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  SomaExpressaoI n2 = null;
    n0 = Termo();
    label_29:
    while (true) {
      if (jj_2_128(2)) {
        ;
      } else {
        break label_29;
      }
      n2 = SomaExpressaoI();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new SomaExpressao(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public SomaExpressaoI SomaExpressaoI() throws ParseException {
  // --- JTB generated node declarations ---
  Soma n0 = null;
  Termo n1 = null;
    n0 = Soma();
    n1 = Termo();
    {if (true) return new SomaExpressaoI(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Soma Soma() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  // --- user BNFProduction java block ---
  Token token = null;
    if (jj_2_129(2)) {
      n2 = jj_consume_token(MAIS);
      n1 = JTBToolkit.makeNodeToken(n2);
      token = n2;
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_130(2)) {
      n4 = jj_consume_token(MENOS);
      n3 = JTBToolkit.makeNodeToken(n4);
      token = n4;
      n0 = new NodeChoice(n3, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Soma(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Termo Termo() throws ParseException {
  // --- JTB generated node declarations ---
  Fator n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  TermoI n2 = null;
    n0 = Fator();
    label_30:
    while (true) {
      if (jj_2_131(2)) {
        ;
      } else {
        break label_30;
      }
      n2 = TermoI();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new Termo(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public TermoI TermoI() throws ParseException {
  // --- JTB generated node declarations ---
  Mult n0 = null;
  Fator n1 = null;
    n0 = Mult();
    n1 = Fator();
    {if (true) return new TermoI(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Mult Mult() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  // --- user BNFProduction java block ---
  Token token = null;
    if (jj_2_132(2)) {
      n2 = jj_consume_token(MULTIPLICAR);
      n1 = JTBToolkit.makeNodeToken(n2);
      token = n2;
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_133(2)) {
      n4 = jj_consume_token(DIVIDIR);
      n3 = JTBToolkit.makeNodeToken(n4);
      token = n4;
      n0 = new NodeChoice(n3, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Mult(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Fator Fator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SimplesEpressao n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  VarAtivacao n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeChoice n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeChoice n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeSequence n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeChoice n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeToken n42 = null;
  Token n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeChoice n46 = null;
  NodeToken n47 = null;
  Token n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeToken n51 = null;
  Token n52 = null;
  // --- user BNFProduction java block ---
  Token var = null;
  Token t1 = null;
    if (jj_2_142(2)) {
      n1 = new NodeSequence(3);
      n3 = jj_consume_token(APARENTESE);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n4 = SimplesEpressao();
      n1.addNode(n4);
      n6 = jj_consume_token(FPARENTESE);
      n5 = JTBToolkit.makeNodeToken(n6);
      n1.addNode(n5);
      n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_143(2)) {
      n7 = new NodeSequence(3);
      n9 = jj_consume_token(IDENTIFIER);
      n8 = JTBToolkit.makeNodeToken(n9);
      funcao = n9;
      n7.addNode(n8);
      n10 = VarAtivacao(funcao);
      n7.addNode(n10);
      if (atrib != 1) {
        atribuicao.add(new registro(funcao, reg, null));
        reg = null;
      }
      n0 = new NodeChoice(n7, 1, 6);
    } else if (jj_2_144(2)) {
      n12 = jj_consume_token(DIGITO);
      n11 = JTBToolkit.makeNodeToken(n12);
      var = n12;
      atribuicao.add(new registro(var, null, null));
      n0 = new NodeChoice(n11, 2, 6);
    } else if (jj_2_145(2)) {
      n14 = jj_consume_token(PONTO_FLUTUANTE);
      n13 = JTBToolkit.makeNodeToken(n14);
      var = n14;
      atribuicao.add(new registro(var, null, null));
      n0 = new NodeChoice(n13, 3, 6);
    } else if (jj_2_146(2)) {
      n15 = new NodeSequence(7);
      n17 = jj_consume_token(DIV);
      n16 = JTBToolkit.makeNodeToken(n17);
      n15.addNode(n16);
      n19 = jj_consume_token(APARENTESE);
      n18 = JTBToolkit.makeNodeToken(n19);
      n15.addNode(n18);
      if (jj_2_134(2)) {
        n22 = jj_consume_token(DIGITO);
          n21 = JTBToolkit.makeNodeToken(n22);
          n20 = new NodeChoice(n21, 0, 2);
      } else if (jj_2_135(2)) {
        n24 = jj_consume_token(IDENTIFIER);
          n23 = JTBToolkit.makeNodeToken(n24);
          var = n24;
          n20 = new NodeChoice(n23, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n15.addNode(n20);
      n26 = jj_consume_token(VIRGULA);
      n25 = JTBToolkit.makeNodeToken(n26);
      n15.addNode(n25);
      if (jj_2_136(2)) {
        n29 = jj_consume_token(DIGITO);
          n28 = JTBToolkit.makeNodeToken(n29);
          n27 = new NodeChoice(n28, 0, 2);
      } else if (jj_2_137(2)) {
        n31 = jj_consume_token(IDENTIFIER);
          n30 = JTBToolkit.makeNodeToken(n31);
          t1 = n31;
          n27 = new NodeChoice(n30, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n15.addNode(n27);
      n33 = jj_consume_token(FPARENTESE);
      n32 = JTBToolkit.makeNodeToken(n33);
      n15.addNode(n32);
      AnaliseSemantica.LerVariavelExiste(var, null, varLoc, par);
      AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
      n0 = new NodeChoice(n15, 4, 6);
    } else if (jj_2_147(2)) {
      n34 = new NodeSequence(7);
      n36 = jj_consume_token(MOD);
      n35 = JTBToolkit.makeNodeToken(n36);
      n34.addNode(n35);
      n38 = jj_consume_token(APARENTESE);
      n37 = JTBToolkit.makeNodeToken(n38);
      n34.addNode(n37);
      if (jj_2_138(2)) {
        n41 = jj_consume_token(DIGITO);
          n40 = JTBToolkit.makeNodeToken(n41);
          n39 = new NodeChoice(n40, 0, 2);
      } else if (jj_2_139(2)) {
        n43 = jj_consume_token(IDENTIFIER);
          n42 = JTBToolkit.makeNodeToken(n43);
          var = n43;
          n39 = new NodeChoice(n42, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n34.addNode(n39);
      n45 = jj_consume_token(VIRGULA);
      n44 = JTBToolkit.makeNodeToken(n45);
      n34.addNode(n44);
      if (jj_2_140(2)) {
        n48 = jj_consume_token(DIGITO);
          n47 = JTBToolkit.makeNodeToken(n48);
          n46 = new NodeChoice(n47, 0, 2);
      } else if (jj_2_141(2)) {
        n50 = jj_consume_token(IDENTIFIER);
          n49 = JTBToolkit.makeNodeToken(n50);
          t1 = n50;
          n46 = new NodeChoice(n49, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n34.addNode(n46);
      n52 = jj_consume_token(FPARENTESE);
      n51 = JTBToolkit.makeNodeToken(n52);
      n34.addNode(n51);
      AnaliseSemantica.LerVariavelExiste(var, null, varLoc, par);
      AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
      n0 = new NodeChoice(n34, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Fator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarAtivacao VarAtivacao(Token var) throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Ativacao n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  Var n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeChoice n9 = null;
  SimplesEpressao n10 = null;
  NodeSequence n11 = null;
  NodeOptional n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeOptional n17 = null;
  Var n18 = null;
  NodeSequence n19 = null;
  NodeOptional n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeOptional n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  // --- user BNFProduction java block ---
  Token valor = null;
  Token var2 = null;
  if (atribuicaoComposta == null) {
    atribuicaoComposta = "1";
  }
    if (jj_2_161(2)) {
      n1 = Ativacao();
      AnaliseSemantica.ativacao(funcao, argumentos);
      argumentos.clear();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      n2 = new NodeSequence(2);
      if (jj_2_148(2)) {
        n4 = Var();
        n3.addNode(n4);
      } else {
        ;
      }
      n2.addNode(n3);
      if (jj_2_160(2)) {
        n12 = new NodeOptional();
        n17 = new NodeOptional();
        n20 = new NodeOptional();
        n26 = new NodeOptional();
        n6 = new NodeSequence(2);
        n8 = jj_consume_token(RECEBE);
        n7 = JTBToolkit.makeNodeToken(n8);
        var2 = n8;
        n6.addNode(n7);
        if (jj_2_153(2)) {
          n10 = SimplesEpressao();
            atribuicao.add(0, new registro(var, reg2, null));
            reg2 = null;
            atribuicao.add(1, new registro(var2, null, null));
            atrib = 1;
            n9 = new NodeChoice(n10, 0, 7);
        } else if (jj_2_154(2)) {
            n11 = new NodeSequence(4);
          if (jj_2_149(2)) {
            n14 = jj_consume_token(MENOS);
              n13 = JTBToolkit.makeNodeToken(n14);
              n12.addNode(n13);
          } else {
            ;
          }
            n11.addNode(n12);
          n16 = jj_consume_token(IDENTIFIER);
            n15 = JTBToolkit.makeNodeToken(n16);
            valor = n16;
            n11.addNode(n15);
          if (jj_2_150(2)) {
            n18 = Var();
              n17.addNode(n18);
          } else {
            ;
          }
            n11.addNode(n17);
            atribuicao.add(0, new registro(var, reg2, null));
            reg2 = null;
            atribuicao.add(1, new registro(var2, null, null));
            atrib = 1;
            n9 = new NodeChoice(n11, 1, 7);
        } else if (jj_2_155(2)) {
            n19 = new NodeSequence(3);
          if (jj_2_151(2)) {
            n22 = jj_consume_token(MENOS);
              n21 = JTBToolkit.makeNodeToken(n22);
              n20.addNode(n21);
          } else {
            ;
          }
            n19.addNode(n20);
          n24 = jj_consume_token(DIGITO);
            n23 = JTBToolkit.makeNodeToken(n24);
            valor = n24;
            n19.addNode(n23);
            atribuicao.add(new registro(valor, null, null));
            n9 = new NodeChoice(n19, 2, 7);
        } else if (jj_2_156(2)) {
            n25 = new NodeSequence(3);
          if (jj_2_152(2)) {
            n28 = jj_consume_token(MENOS);
              n27 = JTBToolkit.makeNodeToken(n28);
              n26.addNode(n27);
          } else {
            ;
          }
            n25.addNode(n26);
          n30 = jj_consume_token(PONTO_FLUTUANTE);
            n29 = JTBToolkit.makeNodeToken(n30);
            valor = n30;
            n25.addNode(n29);
            atribuicao.add(new registro(valor, null, null));
            n9 = new NodeChoice(n25, 3, 7);
        } else if (jj_2_157(2)) {
          n32 = jj_consume_token(FALSO);
            n31 = JTBToolkit.makeNodeToken(n32);
            valor = n32;
            if (reg2 != null) {
              AnaliseSemantica.atribuicaoSimplesRegistro(var, reg2, valor, varLoc, par);
              reg2 = null;
            } else {
              AnaliseSemantica.atribuicaoSimplesVariavel(var, valor, varLoc, par);
            }
            n9 = new NodeChoice(n31, 4, 7);
        } else if (jj_2_158(2)) {
          n34 = jj_consume_token(VERDADEIRO);
            n33 = JTBToolkit.makeNodeToken(n34);
            valor = n34;
            if (reg2 != null) {
              AnaliseSemantica.atribuicaoSimplesRegistro(var, reg2, valor, varLoc, par);
              reg2 = null;
            } else {
              AnaliseSemantica.atribuicaoSimplesVariavel(var, valor, varLoc, par);
            }
            n9 = new NodeChoice(n33, 5, 7);
        } else if (jj_2_159(2)) {
          n36 = jj_consume_token(STRING);
            n35 = JTBToolkit.makeNodeToken(n36);
            valor = n36;
            if (reg != null) {
              AnaliseSemantica.atribuicaoSimplesRegistro(funcao, reg, valor, varLoc, par);
              reg = null;
            } else {
              AnaliseSemantica.atribuicaoSimplesVariavel(funcao, valor, varLoc, par);
            }
            n9 = new NodeChoice(n35, 6, 7);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        n6.addNode(n9);
        n5.addNode(n6);
      } else {
        ;
      }
      n2.addNode(n5);
      n0 = new NodeChoice(n2, 1, 2);
    }
    {if (true) return new VarAtivacao(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Var Var() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  ParamIVetor n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeChoice n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeListOptional n28 = null;
  ParamIVetor n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeSequence n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeOptional n37 = new NodeOptional();
  NodeSequence n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeChoice n41 = null;
  NodeToken n42 = null;
  Token n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeListOptional n46 = null;
  ParamIVetor n47 = null;
  NodeToken n48 = null;
  Token n49 = null;
  // --- user BNFProduction java block ---
  Token t1 = null, t2 = null;
    if (jj_2_174(2)) {
      n1 = new NodeSequence(6);
      n3 = jj_consume_token(ACOLCHETE);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      if (jj_2_162(2)) {
        n6 = jj_consume_token(DIGITO);
          n5 = JTBToolkit.makeNodeToken(n6);
          n4 = new NodeChoice(n5, 0, 2);
      } else if (jj_2_163(2)) {
        n8 = jj_consume_token(IDENTIFIER);
          n7 = JTBToolkit.makeNodeToken(n8);
          t1 = n8;
          n4 = new NodeChoice(n7, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1.addNode(n4);
      label_31:
      while (true) {
        if (jj_2_164(2)) {
          ;
        } else {
          break label_31;
        }
        n10 = ParamIVetor();
        n9.addNode(n10);
      }
      n9.nodes.trimToSize();
      n1.addNode(n9);
      n12 = jj_consume_token(FCOLCHETE);
      n11 = JTBToolkit.makeNodeToken(n12);
      n1.addNode(n11);
      if (jj_2_169(2)) {
        n19 = new NodeOptional();
        n14 = new NodeSequence(3);
        n16 = jj_consume_token(PONTO);
        n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
        n18 = jj_consume_token(IDENTIFIER);
        n17 = JTBToolkit.makeNodeToken(n18);
        reg = n18;
        n14.addNode(n17);
        if (jj_2_168(2)) {
          n28 = new NodeListOptional();
          n20 = new NodeSequence(4);
          n22 = jj_consume_token(ACOLCHETE);
          n21 = JTBToolkit.makeNodeToken(n22);
          n20.addNode(n21);
          if (jj_2_165(2)) {
            n25 = jj_consume_token(DIGITO);
              n24 = JTBToolkit.makeNodeToken(n25);
              n23 = new NodeChoice(n24, 0, 2);
          } else if (jj_2_166(2)) {
            n27 = jj_consume_token(IDENTIFIER);
              n26 = JTBToolkit.makeNodeToken(n27);
              t2 = n27;
              n23 = new NodeChoice(n26, 1, 2);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          n20.addNode(n23);
          label_32:
          while (true) {
            if (jj_2_167(2)) {
              ;
            } else {
              break label_32;
            }
            n29 = ParamIVetor();
            n28.addNode(n29);
          }
          n28.nodes.trimToSize();
          n20.addNode(n28);
          n31 = jj_consume_token(FCOLCHETE);
          n30 = JTBToolkit.makeNodeToken(n31);
          n20.addNode(n30);
          n19.addNode(n20);
        } else {
          ;
        }
        n14.addNode(n19);
        n13.addNode(n14);
      } else {
        ;
      }
      n1.addNode(n13);
      if (atribuicaoComposta.equals("1")) {
        reg2 = reg;
        atribuicaoComposta = "2";
      }
      AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
      AnaliseSemantica.LerVariavelExiste(t2, null, varLoc, par);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_175(2)) {
      n32 = new NodeSequence(4);
      n34 = jj_consume_token(PONTO);
      n33 = JTBToolkit.makeNodeToken(n34);
      n32.addNode(n33);
      n36 = jj_consume_token(IDENTIFIER);
      n35 = JTBToolkit.makeNodeToken(n36);
      reg = n36;
      n32.addNode(n35);
      if (jj_2_173(2)) {
        n46 = new NodeListOptional();
        n38 = new NodeSequence(4);
        n40 = jj_consume_token(ACOLCHETE);
        n39 = JTBToolkit.makeNodeToken(n40);
        n38.addNode(n39);
        if (jj_2_170(2)) {
          n43 = jj_consume_token(DIGITO);
            n42 = JTBToolkit.makeNodeToken(n43);
            n41 = new NodeChoice(n42, 0, 2);
        } else if (jj_2_171(2)) {
          n45 = jj_consume_token(IDENTIFIER);
            n44 = JTBToolkit.makeNodeToken(n45);
            t1 = n45;
            n41 = new NodeChoice(n44, 1, 2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        n38.addNode(n41);
        label_33:
        while (true) {
          if (jj_2_172(2)) {
            ;
          } else {
            break label_33;
          }
          n47 = ParamIVetor();
          n46.addNode(n47);
        }
        n46.nodes.trimToSize();
        n38.addNode(n46);
        n49 = jj_consume_token(FCOLCHETE);
        n48 = JTBToolkit.makeNodeToken(n49);
        n38.addNode(n48);
        n37.addNode(n38);
      } else {
        ;
      }
      n32.addNode(n37);
      if (atribuicaoComposta.equals("1")) {
        reg2 = reg;
        atribuicaoComposta = "2";
      }
      AnaliseSemantica.LerVariavelExiste(t1, null, varLoc, par);
      n0 = new NodeChoice(n32, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Var(n0);}
    throw new Error("Missing return statement in function");
  }

/*void Var():
{}
{
  (IndiceVetor())+ (< PONTO > reg = < IDENTIFIER > (IndiceVetor())* )? {  if(atribuicaoComposta.equals("1"))  {     reg2=reg;  atribuicaoComposta="2";} }
| < PONTO > reg = < IDENTIFIER > (IndiceVetor())* {  if(atribuicaoComposta.equals("1"))  {     reg2=reg;  atribuicaoComposta="2";    } }
}*/
  final public Ativacao Ativacao() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  Args n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(APARENTESE);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_176(2)) {
      n3 = Args();
      n2.addNode(n3);
    } else {
      ;
    }
    n5 = jj_consume_token(FPARENTESE);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Ativacao(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public Args Args() throws ParseException {
  // --- JTB generated node declarations ---
  ArgLista n0 = null;
    n0 = ArgLista();
    {if (true) return new Args(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArgLista ArgLista() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeOptional n17 = new NodeOptional();
  Var n18 = null;
  NodeSequence n19 = null;
  NodeOptional n20 = new NodeOptional();
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeListOptional n27 = new NodeListOptional();
  ArgListaRec n28 = null;
  // --- user BNFProduction java block ---
  Token arg = null;
  Token regi = null;
    if (jj_2_181(2)) {
      n2 = jj_consume_token(FALSO);
        n1 = JTBToolkit.makeNodeToken(n2);
        arg = n2;
        n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_182(2)) {
      n4 = jj_consume_token(VERDADEIRO);
        n3 = JTBToolkit.makeNodeToken(n4);
        arg = n4;
        n0 = new NodeChoice(n3, 1, 6);
    } else if (jj_2_183(2)) {
        n5 = new NodeSequence(2);
      if (jj_2_177(2)) {
        n8 = jj_consume_token(MENOS);
          n7 = JTBToolkit.makeNodeToken(n8);
          n6.addNode(n7);
      } else {
        ;
      }
        n5.addNode(n6);
      n10 = jj_consume_token(DIGITO);
        n9 = JTBToolkit.makeNodeToken(n10);
        arg = n10;
        n5.addNode(n9);
        n0 = new NodeChoice(n5, 2, 6);
    } else if (jj_2_184(2)) {
        n11 = new NodeSequence(4);
      if (jj_2_178(2)) {
        n14 = jj_consume_token(MENOS);
          n13 = JTBToolkit.makeNodeToken(n14);
          n12.addNode(n13);
      } else {
        ;
      }
        n11.addNode(n12);
      n16 = jj_consume_token(IDENTIFIER);
        n15 = JTBToolkit.makeNodeToken(n16);
        arg = n16;
        n11.addNode(n15);
      if (jj_2_179(2)) {
        n18 = Var();
          n17.addNode(n18);
      } else {
        ;
      }
        n11.addNode(n17);
        regi = reg;
        n0 = new NodeChoice(n11, 3, 6);
    } else if (jj_2_185(2)) {
        n19 = new NodeSequence(2);
      if (jj_2_180(2)) {
        n22 = jj_consume_token(MENOS);
          n21 = JTBToolkit.makeNodeToken(n22);
          n20.addNode(n21);
      } else {
        ;
      }
        n19.addNode(n20);
      n24 = jj_consume_token(PONTO_FLUTUANTE);
        n23 = JTBToolkit.makeNodeToken(n24);
        arg = n24;
        n19.addNode(n23);
        n0 = new NodeChoice(n19, 4, 6);
    } else if (jj_2_186(2)) {
      n26 = jj_consume_token(STRING);
        n25 = JTBToolkit.makeNodeToken(n26);
        arg = n26;
        n0 = new NodeChoice(n25, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_34:
    while (true) {
      if (jj_2_187(2)) {
        ;
      } else {
        break label_34;
      }
      n28 = ArgListaRec();
      n27.addNode(n28);
    }
    n27.nodes.trimToSize();
    argumentos.add(0, new registro(arg, regi, null));
    reg = null;
    regi = null;
    {if (true) return new ArgLista(n0, n27);}
    throw new Error("Missing return statement in function");
  }

  final public ArgListaRec ArgListaRec() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = new NodeOptional();
  Var n20 = null;
  NodeSequence n21 = null;
  NodeOptional n22 = new NodeOptional();
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  // --- user BNFProduction java block ---
  Token arg = null;
    n1 = jj_consume_token(VIRGULA);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_192(2)) {
      n4 = jj_consume_token(FALSO);
        n3 = JTBToolkit.makeNodeToken(n4);
        arg = n4;
        n2 = new NodeChoice(n3, 0, 6);
    } else if (jj_2_193(2)) {
      n6 = jj_consume_token(VERDADEIRO);
        n5 = JTBToolkit.makeNodeToken(n6);
        arg = n6;
        n2 = new NodeChoice(n5, 1, 6);
    } else if (jj_2_194(2)) {
        n7 = new NodeSequence(2);
      if (jj_2_188(2)) {
        n10 = jj_consume_token(MENOS);
          n9 = JTBToolkit.makeNodeToken(n10);
          n8.addNode(n9);
      } else {
        ;
      }
        n7.addNode(n8);
      n12 = jj_consume_token(DIGITO);
        n11 = JTBToolkit.makeNodeToken(n12);
        arg = n12;
        n7.addNode(n11);
        n2 = new NodeChoice(n7, 2, 6);
    } else if (jj_2_195(2)) {
        n13 = new NodeSequence(3);
      if (jj_2_189(2)) {
        n16 = jj_consume_token(MENOS);
          n15 = JTBToolkit.makeNodeToken(n16);
          n14.addNode(n15);
      } else {
        ;
      }
        n13.addNode(n14);
      n18 = jj_consume_token(IDENTIFIER);
        n17 = JTBToolkit.makeNodeToken(n18);
        arg = n18;
        n13.addNode(n17);
      if (jj_2_190(2)) {
        n20 = Var();
          n19.addNode(n20);
      } else {
        ;
      }
        n13.addNode(n19);
        n2 = new NodeChoice(n13, 3, 6);
    } else if (jj_2_196(2)) {
        n21 = new NodeSequence(2);
      if (jj_2_191(2)) {
        n24 = jj_consume_token(MENOS);
          n23 = JTBToolkit.makeNodeToken(n24);
          n22.addNode(n23);
      } else {
        ;
      }
        n21.addNode(n22);
      n26 = jj_consume_token(PONTO_FLUTUANTE);
        n25 = JTBToolkit.makeNodeToken(n26);
        arg = n26;
        n21.addNode(n25);
        n2 = new NodeChoice(n21, 4, 6);
    } else if (jj_2_197(2)) {
      n28 = jj_consume_token(STRING);
        n27 = JTBToolkit.makeNodeToken(n28);
        arg = n28;
        n2 = new NodeChoice(n27, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    argumentos.add(new registro(arg, reg, null));
    reg = null;
    {if (true) return new ArgListaRec(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  private boolean jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  private boolean jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  private boolean jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  private boolean jj_2_183(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  private boolean jj_2_184(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  private boolean jj_2_185(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  private boolean jj_2_186(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  private boolean jj_2_187(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  private boolean jj_2_188(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  private boolean jj_2_189(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  private boolean jj_2_190(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  private boolean jj_2_191(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  private boolean jj_2_192(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  private boolean jj_2_193(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  private boolean jj_2_194(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  private boolean jj_2_195(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  private boolean jj_2_196(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  private boolean jj_2_197(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  private boolean jj_3_52() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_165() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(MATRIZ)) return true;
    if (jj_scan_token(ACOLCHETE)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(INICIO_LITERAL)) return true;
    Token xsp;
    if (jj_3_52()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_135() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_168() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_165()) {
    jj_scanpos = xsp;
    if (jj_3_166()) return true;
    }
    return false;
  }

  private boolean jj_3_114() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(RETORNE)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_169() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(TIPO)) return true;
    return false;
  }

  private boolean jj_3_146() {
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(APARENTESE)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) jj_scanpos = xsp;
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_164() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_145() {
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3_197() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(SE)) return true;
    if (jj_scan_token(APARENTESE)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_163() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) return true;
    }
    return false;
  }

  private boolean jj_3_162() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_144() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_191() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_191()) jj_scanpos = xsp;
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_174() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3_163()) return true;
    }
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3_109()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_190() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(VETOR)) return true;
    if (jj_scan_token(ACOLCHETE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_174()) {
    jj_scanpos = xsp;
    if (jj_3_175()) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(PASSO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(PONTOEVIRGULA)) return true;
    return false;
  }

  private boolean jj_3_143() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_189() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(PONTOEVIRGULA)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    return false;
  }

  private boolean jj_3_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_189()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_142() {
    if (jj_scan_token(APARENTESE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_142()) {
    jj_scanpos = xsp;
    if (jj_3_143()) {
    jj_scanpos = xsp;
    if (jj_3_144()) {
    jj_scanpos = xsp;
    if (jj_3_145()) {
    jj_scanpos = xsp;
    if (jj_3_146()) {
    jj_scanpos = xsp;
    if (jj_3_147()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(FACA)) return true;
    Token xsp;
    if (jj_3_67()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(Registro)) return true;
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_188() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_188()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_193() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_192() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(VIRGULA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_192()) {
    jj_scanpos = xsp;
    if (jj_3_193()) {
    jj_scanpos = xsp;
    if (jj_3_194()) {
    jj_scanpos = xsp;
    if (jj_3_195()) {
    jj_scanpos = xsp;
    if (jj_3_196()) {
    jj_scanpos = xsp;
    if (jj_3_197()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_62()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_159() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(RECEBE)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(PARA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  private boolean jj_3_133() {
    if (jj_scan_token(DIVIDIR)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_158() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_132() {
    if (jj_scan_token(MULTIPLICAR)) return true;
    return false;
  }

  private boolean jj_3_187() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_186() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_157() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(REPITA)) return true;
    Token xsp;
    if (jj_3_63()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_180() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_83()) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_180()) jj_scanpos = xsp;
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(Tipo)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_152() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_152()) jj_scanpos = xsp;
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_179() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(Caso)) return true;
    if (jj_scan_token(Contrario)) return true;
    return false;
  }

  private boolean jj_3_131() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_178() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_151() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_178()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3_179()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_151()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(ENQUANTO)) return true;
    if (jj_scan_token(APARENTESE)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(VIRGULA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_130() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_177() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_150() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_scan_token(MAIS)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(Caso)) return true;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_177()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) return true;
    }
    return false;
  }

  private boolean jj_3_182() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_149() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_149()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_181() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_181()) {
    jj_scanpos = xsp;
    if (jj_3_182()) {
    jj_scanpos = xsp;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) {
    jj_scanpos = xsp;
    if (jj_3_185()) {
    jj_scanpos = xsp;
    if (jj_3_186()) return true;
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_81()) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_153() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_128() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FCOLCHETE)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_160() {
    if (jj_scan_token(RECEBE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_153()) {
    jj_scanpos = xsp;
    if (jj_3_154()) {
    jj_scanpos = xsp;
    if (jj_3_155()) {
    jj_scanpos = xsp;
    if (jj_3_156()) {
    jj_scanpos = xsp;
    if (jj_3_157()) {
    jj_scanpos = xsp;
    if (jj_3_158()) {
    jj_scanpos = xsp;
    if (jj_3_159()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_148() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_127() {
    if (jj_scan_token(NAO)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_scan_token(OU)) return true;
    return false;
  }

  private boolean jj_3_161() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_161()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_125() {
    if (jj_scan_token(E)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_61() {
    Token xsp;
    if (jj_3_59()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_59()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FIMSE)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(Escolha)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(DOISPONTOS)) return true;
    return false;
  }

  private boolean jj_3_176() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_124() {
    if (jj_scan_token(DIFERENTE)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(APARENTESE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_176()) jj_scanpos = xsp;
    if (jj_scan_token(FPARENTESE)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(INICIO_LITERAL)) return true;
    Token xsp;
    if (jj_3_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(ESCREVA)) return true;
    if (jj_scan_token(APARENTESE)) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(PONTO_FLUTUANTE)) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_scan_token(MAIORIGUAL)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(DOISPONTOS)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_scan_token(MAIOR)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_scan_token(MENOR)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(TIPO)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_scan_token(MENORIGUAL)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(LEIA)) return true;
    if (jj_scan_token(APARENTESE)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_172() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_171() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_141() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(SENAO)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_170() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(FIMSE)) return true;
    if (jj_scan_token(PONTOEVIRGULA)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(TIPO)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_173() {
    if (jj_scan_token(ACOLCHETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_170()) {
    jj_scanpos = xsp;
    if (jj_3_171()) return true;
    }
    return false;
  }

  private boolean jj_3_139() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_scan_token(APARENTESE)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_138() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) return true;
    }
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(VERDADEIRO)) return true;
    return false;
  }

  private boolean jj_3_175() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3_147() {
    if (jj_scan_token(MOD)) return true;
    if (jj_scan_token(APARENTESE)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_55() {
    Token xsp;
    if (jj_3_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(PONTOEVIRGULA)) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_167() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(PONTOEVIRGULA)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_137() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_scan_token(FALSO)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_166() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_scan_token(DIGITO)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EG3TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[197];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG3(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG3(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG3(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG3(EG3TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG3TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 197; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
            case 187: jj_3_188(); break;
            case 188: jj_3_189(); break;
            case 189: jj_3_190(); break;
            case 190: jj_3_191(); break;
            case 191: jj_3_192(); break;
            case 192: jj_3_193(); break;
            case 193: jj_3_194(); break;
            case 194: jj_3_195(); break;
            case 195: jj_3_196(); break;
            case 196: jj_3_197(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {}
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
