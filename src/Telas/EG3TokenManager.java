/* Generated By:JavaCC: Do not edit this line. EG3TokenManager.java */
package Telas;
import Telas.TabelaSintatico.hash;
import Telas.AnaliseSemantica.registro;
import Telas.TabelaSintatico.Variavel;
import Telas.visitor.*;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import Telas.syntaxtree.*;

/** Token Manager. */
public class EG3TokenManager implements EG3Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x504000404000000L) != 0L)
            return 36;
         if ((active0 & 0xf8baff12b8000000L) != 0L || (active1 & 0x11L) != 0L)
         {
            jjmatchedKind = 65;
            return 36;
         }
         if ((active0 & 0x240000100000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 15;
         }
         if ((active0 & 0x2800000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 24;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 11;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 30;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 23;
         }
         if ((active0 & 0x8030008000000L) != 0L)
            return 36;
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 10;
         }
         if ((active0 & 0xfdb7fc36b0000000L) != 0L || (active1 & 0x11L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active0 & 0x240000100000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0x68823c1230000000L) != 0L)
            return 36;
         if ((active0 & 0x977dc02d82000000L) != 0L || (active1 & 0x11L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 2;
            }
            return 36;
         }
         return -1;
      case 3:
         if ((active0 & 0x1c00880000000L) != 0L)
            return 36;
         if ((active0 & 0xfffe043702000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 36;
         }
         return -1;
      case 4:
         if ((active0 & 0x803e000000000000L) != 0L)
            return 36;
         if ((active0 & 0x7fc0043702000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x40040002000000L) != 0L || (active1 & 0x1L) != 0L)
            return 36;
         if ((active0 & 0x7f80003700000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x7c00003300000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 36;
         }
         if ((active0 & 0x380000400000000L) != 0L)
            return 36;
         return -1;
      case 7:
         if ((active0 & 0x400000100000000L) != 0L)
            return 36;
         if ((active0 & 0x7800003200000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
            return 36;
         }
         return -1;
      case 8:
         if ((active0 & 0x800002000000000L) != 0L)
            return 36;
         if ((active0 & 0x7000001200000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
            return 36;
         }
         return -1;
      case 9:
         if ((active0 & 0x6000000200000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 9;
            return 36;
         }
         if ((active0 & 0x1000001000000000L) != 0L)
            return 36;
         return -1;
      case 10:
         if ((active0 & 0x2000000200000000L) != 0L)
            return 36;
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
            return 36;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 16);
      case 10:
         return jjStopAtPos(0, 17);
      case 13:
         return jjStopAtPos(0, 18);
      case 32:
         return jjStopAtPos(0, 1);
      case 40:
         return jjStopAtPos(0, 69);
      case 41:
         return jjStopAtPos(0, 70);
      case 42:
         return jjStopAtPos(0, 87);
      case 43:
         return jjStopAtPos(0, 85);
      case 44:
         return jjStopAtPos(0, 74);
      case 45:
         return jjStopAtPos(0, 86);
      case 46:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 47:
         return jjStopAtPos(0, 88);
      case 58:
         return jjStopAtPos(0, 73);
      case 59:
         return jjStopAtPos(0, 71);
      case 60:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x182000L);
      case 61:
         return jjStopAtPos(0, 72);
      case 62:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 91:
         return jjStopAtPos(0, 75);
      case 93:
         return jjStopAtPos(0, 76);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2800000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x220000000000L, 0x0L);
      case 101:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x504000400000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x68a2401220000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10800000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x240000100000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8010000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x9000000000000000L, 0x10L);
      case 167:
         return jjStopAtPos(0, 10);
      case 170:
         return jjStopAtPos(0, 8);
      case 180:
         return jjStopAtPos(0, 11);
      case 186:
         return jjStopAtPos(0, 9);
      case 231:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 46:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 61:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 62:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x30c00810000000L, active1, 0x11L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 36);
         return jjMoveStringLiteralDfa2_0(active0, 0x9249000100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x68822012a0000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000002000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc2000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 117:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400400000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 36);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000002000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6882001200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 36);
         break;
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000080000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000000000L, active1, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000800000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8204000000000000L, active1, 0x1L);
      case 118:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(3, 68);
         break;
      case 97:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 36);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 36);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x400c000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000001000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000100000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 36);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000400000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000200000000L, active1, 0x1L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x32000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400040000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1480000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000200000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000040400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 36);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 36);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 36);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x200002000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000200000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 36);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 36);
         break;
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 122:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 36);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 36);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 36);
         break;
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 36);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000001000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2100000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000002000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800001000000000L);
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 36);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 36);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 36);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 36);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 36);
         break;
      case 111:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 36);
         break;
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 36);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 61, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 62, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x61c158c00000000L, 0xe3c778f0e3c770fL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x20c100c00000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  break;
               case 1:
                  if ((0xffffffff00002780L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(3, 5);
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 32:
                  if (curChar != 34)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0xfffffffb00002380L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 34 && kind > 30)
                     kind = 30;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 2);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAddStates(3, 5);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 1:
                  if ((0x57ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(3, 5);
                  break;
               case 4:
                  if (curChar == 125)
                     kind = 19;
                  break;
               case 5:
               case 26:
                  if (curChar != 111)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar != 108)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(6);
                  break;
               case 16:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar != 101)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(6);
                  break;
               case 18:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if ((0x57ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjAddStates(6, 7);
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjAddStates(3, 5);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 41, 1, 3, 4, 33, 34, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\151\156\151\143\151\157", "\145", "\157\165", "\156\141\157", "\146\151\155", null, "\164\151\160\157", 
"\162\145\147\151\163\164\162\157", "\146\151\155\162\145\147\151\163\164\162\157", 
"\145\163\143\157\154\150\141", "\143\141\163\157", "\146\151\155\145\163\143\157\154\150\141", 
"\143\157\156\164\162\141\162\151\157", null, null, "\163\145", "\144\145", "\155\157\144\165\154\157", 
"\155\157\144", "\141\164\145", "\144\151\166", "\146\141\143\141", "\160\141\162\141", 
"\154\145\151\141", "\146\151\155\163\145", "\145\156\164\141\157", "\163\145\156\141\157", 
"\160\141\163\163\157", "\146\141\154\163\157", "\162\145\160\151\164\141", 
"\146\151\155\160\141\162\141", "\145\163\143\162\145\166\141", "\162\145\164\157\162\156\145", 
"\145\156\161\165\141\156\164\157", "\146\151\155\155\157\144\165\154\157", 
"\166\145\162\144\141\144\145\151\162\157", "\146\151\155\145\156\161\165\141\156\164\157", 
"\146\151\155\141\154\147\157\162\151\164\155\157", "\166\145\164\157\162", "\155\141\164\162\151\172", null, null, null, 
"\166\141\162\72", "\50", "\51", "\73", "\75", "\72", "\54", "\133", "\135", "\74\55", "\56\56", 
"\56", "\76", "\74", "\76\75", "\74\75", "\74\76", "\53", "\55", "\52", "\57", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffe100001L, 0x1fffff3L, 
};
static final long[] jjtoSkip = {
   0xffffeL, 0x2000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x2000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[43];
private final int[] jjstateSet = new int[86];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public EG3TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public EG3TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while ((curChar < 64 && (0x7a00000000L & (1L << curChar)) != 0L) || 
             (curChar >> 6) == 1 && (0x4000000140000001L & (1L << (curChar & 077))) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add(" ");
         break;
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add("\u005ct");
         break;
      case 17 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add("\u005cn");
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add("\u005cr");
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add(image.toString().trim());
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
      TraducaoPortugolEmC.programaAll.add("inicio");
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
      TraducaoPortugolEmC.programaAll.add("e");
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
      TraducaoPortugolEmC.programaAll.add("ou");
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
      TraducaoPortugolEmC.programaAll.add("nao");
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
      TraducaoPortugolEmC.programaAll.add("fim");
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add(image.toString().trim());
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
      TraducaoPortugolEmC.programaAll.add("tipo");
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
      TraducaoPortugolEmC.programaAll.add("registro");
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
      TraducaoPortugolEmC.programaAll.add("fimregistro");
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
      TraducaoPortugolEmC.programaAll.add("escolha");
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
      TraducaoPortugolEmC.programaAll.add("caso");
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
      TraducaoPortugolEmC.programaAll.add("fimescolha");
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
      TraducaoPortugolEmC.programaAll.add("contrario");
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add(image.toString().trim());
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add(image.toString().trim());
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
      TraducaoPortugolEmC.programaAll.add("se");
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
      TraducaoPortugolEmC.programaAll.add("de");
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
      TraducaoPortugolEmC.programaAll.add("modulo");
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
      TraducaoPortugolEmC.programaAll.add("mod");
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
      TraducaoPortugolEmC.programaAll.add("ate");
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
      TraducaoPortugolEmC.programaAll.add("div");
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
      TraducaoPortugolEmC.programaAll.add("faca");
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
      TraducaoPortugolEmC.programaAll.add("para");
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
      TraducaoPortugolEmC.programaAll.add("leia");
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
      TraducaoPortugolEmC.programaAll.add("fimse");
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
      TraducaoPortugolEmC.programaAll.add("entao");
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
      TraducaoPortugolEmC.programaAll.add("senao");
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
      TraducaoPortugolEmC.programaAll.add("passo");
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
      TraducaoPortugolEmC.programaAll.add("falso");
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
      TraducaoPortugolEmC.programaAll.add("repita");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
      TraducaoPortugolEmC.programaAll.add("fimpara");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
      TraducaoPortugolEmC.programaAll.add("escreva");
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
      TraducaoPortugolEmC.programaAll.add("retorne");
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
      TraducaoPortugolEmC.programaAll.add("enquanto");
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
      TraducaoPortugolEmC.programaAll.add("fimmodulo");
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
      TraducaoPortugolEmC.programaAll.add("verdadeiro");
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
      TraducaoPortugolEmC.programaAll.add("fimenquanto");
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
      TraducaoPortugolEmC.programaAll.add("fimalgoritmo");
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
      TraducaoPortugolEmC.programaAll.add("vetor");
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
      TraducaoPortugolEmC.programaAll.add("matriz");
         break;
      case 65 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      TraducaoPortugolEmC.programaAll.add(image.toString().trim());
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
      TraducaoPortugolEmC.programaAll.add("var:");
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
      TraducaoPortugolEmC.programaAll.add("(");
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
      TraducaoPortugolEmC.programaAll.add(")");
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
      TraducaoPortugolEmC.programaAll.add(";");
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
      TraducaoPortugolEmC.programaAll.add("=");
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
      TraducaoPortugolEmC.programaAll.add(":");
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
      TraducaoPortugolEmC.programaAll.add(",");
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
      TraducaoPortugolEmC.programaAll.add("[");
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
      TraducaoPortugolEmC.programaAll.add("]");
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
      TraducaoPortugolEmC.programaAll.add("<-");
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
      TraducaoPortugolEmC.programaAll.add("..");
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
      TraducaoPortugolEmC.programaAll.add(".");
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
      TraducaoPortugolEmC.programaAll.add(">");
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
      TraducaoPortugolEmC.programaAll.add("<");
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
      TraducaoPortugolEmC.programaAll.add(">=");
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
      TraducaoPortugolEmC.programaAll.add("<=");
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
      TraducaoPortugolEmC.programaAll.add("<>");
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
      TraducaoPortugolEmC.programaAll.add("+");
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
      TraducaoPortugolEmC.programaAll.add("-");
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
      TraducaoPortugolEmC.programaAll.add("*");
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
      TraducaoPortugolEmC.programaAll.add("/");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
